||| Maintained by: mgordon

{define-class public open CommonTest
  let private test-list:{Array-of GuiTest} = {{Array-of GuiTest}}
  
  {define-proc public {setup-common-mouse-test target:
                          {proc-type {value:String =
                              "123456789 223456789 323456789 ",
                                      ...
                                     }:Control
                          }
                      }:void
    
    || Double Click Initial conditions: no selection
    {let dclick-1:GuiTest =
        {GuiTest
            {target},
            "Double click at first word test", results,
            {UI.clear-selection},
            {UI.dclick 7mm, 0mm},
            {UI.check-selection "123456789 ", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let dclick-2:GuiTest =
        {GuiTest
            {target},
            "Double click at second word test", results,
            {UI.clear-selection},
            {UI.dclick 12, 0mm},
            {UI.check-selection "223456789 ", platform = "win32 linux"},
            {UI.check-selection "223456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let dclick-3:GuiTest =
        {GuiTest
            {target},
            "Double click at third word test", results,
            {UI.clear-selection},
            {UI.dclick 22, 0},
            {UI.check-selection "323456789 ", platform = "win32 linux"},
            {UI.check-selection "323456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let dclick-gap-1:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Double click at gap at 9.3 test", results,
            {UI.clear-selection},
            {UI.dclick 9.3, 0},
            {UI.check-selection "123456789 ", platform = "win32 linux"},
            || New behavior according to the bug#30783
            {UI.check-selection "123456789 ABCDEFGHI", platform = "mac"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let dclick-far-left:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Double click at far left test", results,
            {UI.clear-selection},
            {UI.dclick 0.35, 0},
            {UI.check-selection "123456789 ", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    || Double Click Initial conditions: first word selected
    {let dclick-sel-1:GuiTest =
        {GuiTest
            {target},
            "Double click on selected word test[first word selected]", results,
            {UI.clear-selection},
            || Select the first word.
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            || Now do the double click
            {UI.dclick 7, 0mm},
            {UI.check-selection "123456789 ", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let dclick-sel-gap-1:GuiTest =
        {GuiTest
            {target},
            "Double click at gap at 9.3 when first word is selected test", results,
            || Select the first word.
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            || Now do the double clicks
            {UI.dclick 9.3, 0mm},
            {UI.check-selection "123456789 ", platform = "win32 linux"},
            || New behavior according to the bug#30783
            {UI.check-selection "123456789 223456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let dclick-sel-2:GuiTest =
        {GuiTest
            {target},
            "Double click on second word when first word is selected test",
            results,
            || Select the first word
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            || Now do the double clicks
            {UI.dclick 14, 0mm},
            {UI.check-selection "223456789 ", platform = "win32 linux"},
            {UI.check-selection "223456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let dclick-sel-far-left:GuiTest =
        {GuiTest
            {target},
            "Double click far left when first word is selected from 1.5 test",
            results,
            || Select the first word.
            {UI.focus},
            {UI.clear-selection},
            {UI.press 1.5, 0},
            {UI.move 3.0, 0},
            {UI.move 9.0, 0},
            {UI.release 9.0, 0},
            || Now do the double click
            {UI.delay 1000},
            {UI.dclick .35, 0},
            {UI.check-selection "123456789 ", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }
    
    || End double click
    || Click Test
    || Click Initial conditions: no selection
    {let click-test-1:GuiTest =
        {GuiTest
            {target}, "Click once within first word test", results,
            {UI.clear-selection},
            {UI.press 5, 0mm},
            {UI.release 5, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let click-test-2:GuiTest =
        {GuiTest
            {target},
            "Click once within second word test", results,
            {UI.clear-selection},
            {UI.press 15, 0mm},
            {UI.release 15, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let click-test-gap:GuiTest =
        {GuiTest
            {target}, "Click once within gap test", results,
            {UI.clear-selection},
            {UI.press 9.4, 0mm},
            {UI.release 9.4, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let click-test-far-left:GuiTest =
        {GuiTest
            {target},
            "Click once far left test", results,
            {UI.clear-selection},
            {UI.press 0.0, 0mm},
            {UI.release 0.0, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    || Click Initial conditions: first word selected
    {let click-sel-test-1:GuiTest =
        {GuiTest
            {target},
            "Click on first word when first word is selected test", results,
            || Select first word
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.delay 500},
            {UI.press 5, 0mm},
            {UI.release 5, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let click-sel-test-2:GuiTest =
        {GuiTest
            {target},
            "Click on second word when first word is selected test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.press 15, 0mm},
            {UI.release 15, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let click-sel-gap:GuiTest =
        {GuiTest
            {target},
            "Click at gap when first word is selected test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.press 9.4, 0mm},
            {UI.release 9.4, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let click-sel-far-left:GuiTest =
        {GuiTest
            {target},
            "Click on far left when first word is selected test", results,
            || Select first word
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.delay 500},
            {UI.click 1.0, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    || Triple Click Initial conditions: no selection

    {let tclick-1:GuiTest =
        {GuiTest
            {target},
            "Triple click within first word test", results,
            {UI.clear-selection},
            {UI.dclick 5, 0mm},
            {UI.click 5, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let tclick-2:GuiTest =
        {GuiTest
            {target},
            "Triple click within second word test", results,
            {UI.clear-selection},
            {UI.dclick 15, 0mm},
            {UI.click 15, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let tclick-gap:GuiTest =
        {GuiTest
            {target},
            "Triple click at gap 9.4 test", results,
            {UI.clear-selection},
            {UI.dclick 9.4, 0mm},
            {UI.click 9.4, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let tclick-far-left:GuiTest =
        {GuiTest
            {target},
            "Triple click far left test", results,
            {UI.clear-selection},
            {UI.dclick 0.35, 0mm},
            {UI.click 0.35, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    || Triple  Initial conditions: first word selected
    {let tclick-sel-test-1:GuiTest =
        {GuiTest
            {target},
            "Triple click on first word [when first word is selected] test",
            results,
            || Select the first word
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            ||Triple click
            {UI.dclick 5, 0mm},
            {UI.click 5, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let tclick-sel-test-2:GuiTest =
        {GuiTest
            {target},
            "Triple click on second word [when first word is selected] test",
            results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.dclick 15, 0mm},
            {UI.click 15, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let tclick-sel-gap:GuiTest =
        {GuiTest
            {target},
            "Triple click at gap when first word is selected test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.dclick 9.4, 0mm},
            {UI.click 9.4, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let tclick-sel-far-left:GuiTest =
        {GuiTest
            {target},
            "Triple click on far left when first word is selected from 1.5 test",
            results,
            || Select the first word
            {UI.focus},
            {UI.clear-selection},
            {UI.press 1.5, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            ||Triple click
            {UI.delay 500},
            {UI.dclick 0.35, 0mm},
            {UI.click  0.35, 0mm},
            {UI.check-selection "123456789 223456789 323456789 "},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }


    || Right Click Initial conditions: no selection
    || The behaviour of Right-click on Mac is according to the Bug id:26766
    {let rclick-test-1:GuiTest =
        {GuiTest {target},
            "Right click within first word test", results,
            {UI.click button = right-button, 5, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.delay 500},
            || Close the context menu
            {UI.click 2, 0mm},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let rclick-test-2:GuiTest =
        {GuiTest {target},
            "Right click within second word test", results,
            {UI.click button = right-button, 15, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection "223456789", platform = "mac"},
            {UI.delay 500},
            ||Close the context menu
            {UI.click 5, 0mm},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let rclick-gap:GuiTest =
        {GuiTest {target},
            "Right click in gap at 9.4 test", results,
            {UI.click button = right-button, 9.4, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            ||On HTML in safari it selects the gap
            {UI.check-selection " ", platform = "mac"},
            {UI.delay 500},
            ||Close the context menu
            {UI.click 5, 0mm},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let rclick-test-far-left:GuiTest =
        {GuiTest {target},
            "Right click far left test", results,
            {UI.click button = right-button, 0.35, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.delay 500},
            || Close the context menu
            {UI.click 30, 0mm},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }


    || Right Click Initial conditions: first word selected
    {let rclick-sel-test-1:GuiTest =
        {GuiTest
            {target},
            "Right click on first word[when first word is selected] test",
            results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.click button = right-button, 7, 0mm},
            ||Close the context menu
            {UI.delay 500},
            {UI.click 30, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let rclick-sel-test-2:GuiTest =
        {GuiTest
            {target},
            "Right click on second word [when first word is selected] test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.click button = right-button, 15, 0mm},
            {UI.delay 500},
            {UI.click 30, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection "223456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let rclick-sel-gap:GuiTest =
        {GuiTest
            {target},
            "Right click at gap at 9.4 when first word is selected", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.click button = right-button, 9.4, 0mm},
            {UI.check-selection "123456789"},
            ||Close the context menu
            {UI.delay 500},
            {UI.click 30, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection " ", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    {let rclick-sel-test-far-left:GuiTest =
        {GuiTest
            {target},
            "Right click on far left when first word is selected test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 3.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.release 9.0, 0mm},
            {UI.check-selection "123456789"},
            {UI.click button = right-button, 0.35, 0mm},
            ||Close the context menu
            {UI.delay 500},
            {UI.click 30, 0mm},
            {UI.check-selection "", platform = "win32 linux"},
            {UI.check-selection "123456789", platform = "mac"},
            {UI.check-value "123456789 223456789 323456789 "}
        }
    }

    ||Drag selection
    {let drag-test-first-char:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word in right direction starting from
             first character test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 0.35, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.release 7.0, 0mm},
            {UI.check-selection "1234567"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let drag-test:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word in right direction test",
            results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 3.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.release 7.0, 0mm},
            {UI.check-selection "4567"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }


    {let drag-test-1:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word in left direction test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 7.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 3.0, 0mm},
            {UI.release 3.0, 0mm},
            {UI.check-selection "4567"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }


    {let drag-test-2:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word first in right direction and
             then in left direction test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 7.0, 0mm},
            {UI.move 8.0, 0mm},
            {UI.move 2.0, 0mm},
            {UI.release 2.0, 0mm},
            {UI.check-selection "34567"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let drag-test-3:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word first in right and then left and 
            then again on right test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 5.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.move 2.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.release 7.0, 0mm},
            {UI.check-selection "67"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let drag-test-4:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word in left direction and then right
            direction test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 5.0, 0mm},
            {UI.move 2.0, 0mm},
            {UI.move 8.0, 0mm},
            {UI.release 8.0, 0mm},
            {UI.check-selection "678"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let drag-test-5:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with left button on same word first in left and then on right
            and then again on left test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 5.0, 0mm},
            {UI.move 2.0, 0mm},
            {UI.move 8.0, 0mm},
            {UI.move 2.0, 0mm},
            {UI.release 2.0, 0mm},
            {UI.check-selection "345"},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let drag-test-6:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with right mouse button in right direction test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 3.0, 0mm},
            {UI.release 3.0, 0mm},
            {UI.clear-selection},
            {UI.press button = right-button, 7.0, 0mm},
            {UI.move 9.0, 0mm},
            {UI.move 11.0, 0mm},
            {UI.release 11.0, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }

    {let drag-test-7:GuiTest =
        {GuiTest
            {target value = "123456789 ABCDEFGHI 1234567890"},
            "Drag with right mouse button in left direction test", results,
            {UI.focus},
            {UI.clear-selection},
            {UI.press 3.0, 0mm},
            {UI.release 3.0, 0mm},
            {UI.clear-selection},
            {UI.press button = right-button, 7.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 2.0, 0mm},
            {UI.release 2.0, 0mm},
            {UI.check-selection ""},
            {UI.check-value "123456789 ABCDEFGHI 1234567890"}
        }
    }
    || End of Right Click
    {CommonTest.test-list.append dclick-1}
    {CommonTest.test-list.append dclick-2}
    {CommonTest.test-list.append dclick-3}
    || FIXME:nilesh_khemkar: 08-09-2009
    || Change in behavior due to fix for Bug#30783(The caret jumps to the
    || next line after double clicking at the end of a line in TextArea and
    || RichTextArea). 
    || Because of the above fix the following two tests are failing in
    || ComboBox test script on Mac. In this case, need to confirm the expected
    || behavior for ComboBox. Once we get the confirmation we need to modify
    || the tests or move to individual script. 
    {platform-switch
     case "mac" do
     else
        {CommonTest.test-list.append dclick-gap-1}
    }
    {CommonTest.test-list.append dclick-far-left}
    {CommonTest.test-list.append dclick-sel-1}
    || FIXME: Bug#30783 (As described above)
    {platform-switch
     case "mac" do
     else
        {CommonTest.test-list.append dclick-sel-gap-1}
    }
    {CommonTest.test-list.append dclick-sel-2}
    {CommonTest.test-list.append dclick-sel-far-left}
    {CommonTest.test-list.append click-test-1}
    {CommonTest.test-list.append click-test-2}
    {CommonTest.test-list.append click-test-gap}
    {CommonTest.test-list.append click-test-far-left}
    {CommonTest.test-list.append click-sel-test-1}
    {CommonTest.test-list.append click-sel-test-2}
    {CommonTest.test-list.append click-sel-gap}
    {CommonTest.test-list.append click-sel-far-left}
    {CommonTest.test-list.append tclick-1}
    {CommonTest.test-list.append tclick-2}
    {CommonTest.test-list.append tclick-gap}
    {CommonTest.test-list.append tclick-far-left}
    {CommonTest.test-list.append tclick-sel-test-1}
    {CommonTest.test-list.append tclick-sel-test-2}
    {CommonTest.test-list.append tclick-sel-gap}
    {CommonTest.test-list.append tclick-sel-far-left}
    || The behaviour of Right-click on Mac is according to the Bug id:26766
    || Remove this platform check once the bug is FIXED.
    || FIXME: sukhpal_bawa: Bug #26766
    {platform-switch
     case "mac" do
     else 
        {CommonTest.test-list.append rclick-test-1}
        {CommonTest.test-list.append rclick-test-2}
        {CommonTest.test-list.append rclick-gap}
        {CommonTest.test-list.append rclick-test-far-left}
        {CommonTest.test-list.append rclick-sel-test-1}
        {CommonTest.test-list.append rclick-sel-test-2}
        {CommonTest.test-list.append rclick-sel-gap}
        {CommonTest.test-list.append rclick-sel-test-far-left}
    }
    
    {CommonTest.test-list.append drag-test-first-char}
    {CommonTest.test-list.append drag-test}
    {CommonTest.test-list.append drag-test-1}
    {CommonTest.test-list.append drag-test-2}
    {CommonTest.test-list.append drag-test-3}
    {CommonTest.test-list.append drag-test-4}
    {CommonTest.test-list.append drag-test-5}
    || FIXME: Bug id:30735 - Works on Mac (but not on Windows and Linux as
    || Deh's changes (186113) have not been merged with kendall/trunk)
    {platform-switch
     case "mac" do
        {CommonTest.test-list.append drag-test-6}
        {CommonTest.test-list.append drag-test-7}
    }
  }

  || Keyboard events
  {define-proc public {setup-common-keyboard-test target:
                          {proc-type {value:String =
                              "123456789 223456789 323456789 ",
                                      ...
                                     }:Control
                          }
                      }:void
    
    def value-changed = {ValueChanged}
    def value-finished = {ValueFinished}
    def key-press = {KeyPress}

    {let cut-copy-paste-test:GuiTest =
        {GuiTest {target value = "123456789 123456789 123456789 "},
            "Cut copy paste keyboard event test", results,
            {UI.focus},
            
            || cut command(ctrl+x) 
            {UI.press 4.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.release 7.0, 0mm},           
            {UI.type "x", command? = true},
            
            || paste command(ctrl+v)
            {UI.click 6.0, 0},
            {UI.type "v", command? = true},
            {UI.check-value "123489567 123456789 123456789 "},
            
            || copy command(ctrl+c)
            {UI.press 4.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 6.0, 0mm},
            {UI.release 6.0, 0mm},
            {UI.type "c", command? = true},

            || paste command(ctrl+v)
            {UI.click 9.0, 0},            
            {UI.type "v", command? = true},
            {UI.check-value "12348956789 123456789 123456789 "},

            || cut command(ctrl+x)
            || readjust the original value
            {UI.press 4.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 6.0, 0mm},
            {UI.release 6.0, 0mm},            
            {UI.type "x", command? = true},
            {UI.check-value "123456789 123456789 123456789 "}
        }
    }

    {let select-all-test:GuiTest =
        {GuiTest {target value = "opqrst "},
            "Select all keyboard event test", results,
            {UI.focus},

            || select all(ctrl+a)
            {UI.click 3.0, 0},
            {UI.type "a", command? = true},
            {UI.check-selection "opqrst "},
            {UI.clear-selection}
        }
    }

    {let undo-redo-test:GuiTest =
        {GuiTest {target value = "ABCDEFG 123456789 ABCDEFG 123456789 "},
            "Undo redo keyboard event test", results,
            {UI.focus},
            
            || cut command(ctrl+x)
            {UI.press 20.0, 0mm},
            {UI.move 21.0, 0mm},
            {UI.move 22.0, 0mm},
            {UI.release 22.0, 0mm},
            {UI.type "x", command? = true},
            || check valuechanged event
            {UI.check-events key-press, value-changed},
            {UI.check-value "ABCDEFG 123456789 ABEFG 123456789 "},

            || undo command(ctrl+z)
            {UI.type "z", command? = true},
            || check valuechanged event
            {UI.check-events key-press, value-changed},
            {UI.check-value "ABCDEFG 123456789 ABCDEFG 123456789 "},

            || redo command(ctrl+y)
            {UI.type "y", ctrl? = true, platform = "win32 linux"},
            {UI.check-value "ABCDEFG 123456789 ABEFG 123456789 ",
                platform = "win32 linux"},
            {UI.type "z", shift? = true, command? = true, platform = "mac"},
            || check valuechanged event
            {UI.check-events key-press, value-changed},
            {UI.check-value "ABCDEFG 123456789 ABEFG 123456789 "},

            || undo command(ctrl+z)
            {UI.type "z", command? = true},
            || check valuechanged event
            {UI.check-events key-press, value-changed},
            {UI.check-value "ABCDEFG 123456789 ABCDEFG 123456789 "},
            {UI.clear-selection}
        }
    }

    {let shift-arrowkeys-selection-test:GuiTest =
        {GuiTest {target value = "ABCDEFG 123456789 ABCDEFG 123456789 "},
            "Shift arrowkeys selection keyboard event test", results,
            {UI.focus},
            {UI.clear-selection},
            
            || shift+left->
            {UI.click 11.0, 0mm},
            {UI.press-key "left", shift? = true},
            {UI.check-selection "3"},
            {UI.clear-selection},
            
            || shift+right<-
            {UI.click 14.0, 0mm},
            {UI.press-key "right", shift? = true},
            {UI.check-selection "7"},
            {UI.clear-selection}
        }
    }
    || End of keyboard events
    
    {CommonTest.test-list.append cut-copy-paste-test}
    {CommonTest.test-list.append select-all-test}
    {CommonTest.test-list.append undo-redo-test}
    {CommonTest.test-list.append shift-arrowkeys-selection-test}
  }

  || Misc - context menu, max-chars, editable? and
  || request-undo-stack-depth-limit tests
  {define-proc public {setup-common-misc-test target:
                          {proc-type {value:String =
                              "123456789 223456789 323456789 ",
                                      ...
                                     }:Control
                          }
                      }:void
    
    || Context menu
    {let cut-paste-undo-context-menu-test:GuiTest =
        {GuiTest {target value = "123456789 123456789 123456789 "},
            "Check cut/paste/undo via context menu test", results,            
            {UI.focus},
            {UI.clear-selection},
           
            || Select to unable the cut context menu
            {UI.press 4.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.release 7.0, 0mm},
            || Cut via context menu
            {UI.click button = right-button, 5.4, 0mm},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.delay 500},
            {UI.press-key "enter"},
            {UI.check-value "123489 123456789 123456789 "},

            || Paste via context menu
            {UI.click button = right-button, 5.4, 0mm},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.delay 500},
            {UI.press-key "enter"},
            {UI.check-value "123456789 123456789 123456789 "},
            
            || Undo via context menu
            {UI.click button = right-button, 5.4, 0mm},
            {UI.press-key "down"},
            {UI.delay 500},
            {UI.press-key "enter"},
            {UI.check-value "123489 123456789 123456789 "},

            || Instead of set-value, we do undo via context menu again,
            || since its common test which will run on all text-controls
            || including combobox, which expect int value instead of string.
            {UI.click button = right-button, 5.4, 0mm},
            {UI.press-key "down"},
            {UI.delay 500},
            {UI.press-key "enter"},
            {UI.check-value "123456789 123456789 123456789 "}
        }
    }

    {let copy-paste-delete-context-menu-test:GuiTest =
        {GuiTest {target value = "123456789 123456789 123456789 "},
            "Check copy/paste/delete via context menu test", results,            
            {UI.focus},
            {UI.clear-selection},
            
            || Select to unable the cut context menu
            {UI.press 4.0, 0mm},
            {UI.move 5.0, 0mm},
            {UI.move 7.0, 0mm},
            {UI.release 7.0, 0mm},
            || Copy via context menu
            {UI.click button = right-button, 5.4, 0mm},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.delay 500},
            {UI.press-key "enter"},
            || After copy click at end of string
            {UI.clear-selection},
            {UI.click 9.0, 0mm},
            || Paste via context menu
            {UI.click button = right-button, 9.0, 0mm},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.delay 500},
            {UI.press-key "enter"},
            {UI.check-value "123456789567 123456789 123456789 "},
            
            || Select to unable the delete context menu
            {UI.press 9.0, 0mm},
            {UI.move 10.0, 0mm},
            {UI.move 12.0, 0mm},
            {UI.release 12.0, 0mm},
            || Delete via context menu
            {UI.click button = right-button, 12.0, 0mm},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},
            {UI.press-key "down"},            
            {UI.delay 500},
            {UI.press-key "enter"},
            {UI.check-value "123456789 123456789 123456789 "}            
        }
    }

    || Case when max-chars is set and typing more than max-chars
    {let max-chars-test:GuiTest =
        {GuiTest
            {target value = "123456789 123456789 123456789 ", max-chars = 30},
            "Check when max-chars is set and typing more than max-chars test",
            results,
            {UI.focus},
            || Type more than set max-chars
            {UI.click 29.0, 0mm},
            {UI.type "More chars"},
            || It should not type since max-chars is set
            {UI.check-value "123456789 123456789 123456789 "}
        }
    }

    || Check editable?
    {let check-editable-test:GuiTest =
        {GuiTest
            {target value = "123456789 123456789 123456789 ", editable? = false},
            "Check editable? test",
            results,
            {UI.focus},
            || Type something and check for editable? property
            {UI.click 12.0, 0mm},
            {UI.type "Check editable?"},
            || It should not type since editable? is false
            {UI.check-value "123456789 123456789 123456789 "}
        }
    }
    {CommonTest.test-list.append cut-paste-undo-context-menu-test}
    {CommonTest.test-list.append copy-paste-delete-context-menu-test}
    {CommonTest.test-list.append max-chars-test}
    {CommonTest.test-list.append check-editable-test}
  }
  || End of misc tests

  {define-proc public {run-common-test}:void
    {for test:GuiTest in CommonTest.test-list do
        {test.run}
    }
  }
}

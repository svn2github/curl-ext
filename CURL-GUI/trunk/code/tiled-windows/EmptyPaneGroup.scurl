{define-class public open EmptyPaneGroup {inherits PaneGroup}
  {constructor public {default ...}
    {construct-super {splice ...}}
    set self.width = {add-stretch}
    set self.height = {add-stretch}
  }

  {getter public sealed {size}:int
    {return 0}
  }

  {getter package {drag-view-divisor}:int
    {return 1}
  }

  {method package {get-percent pane:BasePane}:double
    {return 1.0}
  }

  {method public {get index:int}:#BasePane
    {return null}
  }

  {method public {find child:any}:int
    {return -1}
  }

  {method protected {insert-pane
                        pane:SinglePane,
||--                        orientation:Orientation = Orientation.vertical,
                        at-top-or-left?:bool = false
                    }:void
    || Do nothing.
  }

  {method protected {insert-pane-in-target
                        pane:SinglePane,
                        target:SinglePane,
||--                        orientation:Orientation = Orientation.vertical,
                        at-top-or-left?:bool = false
                    }:void
    || Do nothing.
  }

  {method public {add-pane pane:BasePane}:void
    || Do nothing.
  }

  {method public {add-pane-at-index pane:BasePane, index:int}:void
    || Do nothing.
  }

  {method public sealed {add-pane-and-resize
                            pane:BasePane,
                            index:int
                        }:void
    || Do nothing.
  }

  {method protected {swap-panes my-pane:SinglePane, other-pane:SinglePane}:void
    || Do nothing.
  }

  {method public {remove-pane-at-index index:int}:#BasePane
    {return null}
  }

  {method public sealed {remove-pane-and-resize index:int}:void
    || Do nothing.
  }

  {method package {save-state out:TextOutputStream}:void
    || Check if we are the top-level group
    {if {get-parent-pane-group-or-null self} != null then
        set (self.pane-group, self.percent) = {self.compute-percentage}
     else
        set self.percent = 1.0
    }
    {assert self.percent >= 0, {format "%s", self.percent}}
    {format out = out, "\n\{pane-group percent = %s", self.percent}
    {for i = 0 below self.size do
        {out.write-one-string ", "}
        {(self[i] asa BasePane).save-state out}
    }
    {out.write-one '\}'}
  }

  {method public {replicate invert-orientation?:bool = false}:PaneGroup
    def replica = {EmptyPaneGroup}
    {return replica}
  }
}

{define-class public open SinglePane {inherits BasePane}
||--{define-class public open SinglePane {inherits VBox, BasePane}
  field package constant title-bar:PaneTitleBar
  field private _hidden?:bool
  field package state:PaneState = PaneState.docked
  field package floating-width:Distance = 3in
  field package floating-height:Distance = 3in
  field package floating-x:Distance = -1m
  field package floating-y:Distance = -1m
  field package path:{Array-of int}
  field package from-tab?:bool
  field private _content:PaneContent
||--  field private _content:Graphic           ||PaneContent or TabContainer
  field protected show-minimize-button?:bool
  field protected show-maximize-restore-button?:bool
  field protected show-close-button?:bool
  field package _pane-focus-mgr:#PaneFocusManager

  {local-option public swappable?:bool = false}

  {constructor public {default 
                          content:PaneContent,
                          root-container:#PaneContainer = null,
                          hidden?:bool = false,
                          state:PaneState = PaneState.docked,
                          floating-x:Distance = -1pt,
                          floating-y:Distance = -1pt,
                          floating-width:Distance = 3in,
                          floating-height:Distance = 3in,
                          path:{Array-of int} = {new {Array-of int}},
                          from-tab?:bool = false,
                          percent:double = -1.0,
|| TODO: Push the bools down into PaneContent?
                          swappable?:bool = false,
                          show-minimize-button?:bool = true,
|| TODO: a max-only button?
||--                          show-maximize-button?:bool = true,
                          show-maximize-restore-button?:bool = true,
                          show-close-button?:bool = true
                      }
    set self.show-minimize-button? = show-minimize-button?
    set self.show-maximize-restore-button? = show-maximize-restore-button?
    set self.show-close-button? = show-close-button?
    let tb:PaneTitleBar = {PaneTitleBar self}
    set tb.title = content.title
    set self.title-bar = tb
    set self._content = content
    || NOTE: We need to wait until the content knows who its SinglePane is, or
    ||       the title-controls won't be visible.
    set tb.controls = content.title-controls
    set content.single-pane = self
    set self._hidden? = hidden?
    set self.state = state
    set self.floating-width = floating-width
    set self.floating-height = floating-height
    set self.floating-x = floating-x
    set self.floating-y = floating-y
    set self.path = path
    set self.from-tab? = from-tab?
    set self.percent = percent
    set self.swappable? = swappable?
    {construct-super {VBox tb, content, opaque-to-events? = true}}
    set self.root-container = root-container
    {content.sync-focus-to-title-bar}
  }

  {getter package {hidden?}:bool
    {return self._hidden?}
  }

  {setter package {hidden? val:bool}:void
    {if val != self._hidden? then
        set self._hidden? = val
||--        {self.visible-pane-content.validate-decorations}
    }
  }

  {setter public open {title title:String}:void
    set self.title-bar.title = title
  }

  {getter package {content}:PaneContent
    {return self._content}
  }

  {setter package {content new-content:PaneContent}:void
    {self._content.replace-with new-content}
    set self._content = new-content
  }

  || Return the pane content that's visible (frontmost in the tab group) for
  || this BasePane. If there is no group, just return the content.
  {getter public open {visible-pane-content}:PaneContent
    {return self.content}
||--    {type-switch self.content
||--     case tabs:TabContainer do
||--        {return tabs.current-pane.content asa PaneContent}
||--     case content:PaneContent do
||--        {return content}
||--     else
||--        {error "should never happen"}   ||""
||--    }
  }

  {getter protected {pane-focus-mgr}:#PaneFocusManager
    {if-non-null rc = self.root-container then
        {return rc.pane-focus-mgr}
     else
        {return null}
    }
  }

  {method public open {set-status-text str:String}:void
    {if-non-null rc = self.root-container then
        {rc.set-status-text str}
    }
  }

  {method package {clone-with-new-content
                      new-content:PaneContent
                  }:SinglePane
    let new-pane:SinglePane = 
        {SinglePane
            new-content,
            root-container = self.root-container
        }
    set new-pane.floating-width = self.floating-width
    set new-pane.floating-height = self.floating-height
    set new-pane.floating-x = self.floating-x
    set new-pane.floating-y = self.floating-y
    set new-pane.percent = self.percent
    set new-pane.pane-group = self.pane-group
    set new-pane.from-tab? = true
|| TODO: root-container could be null
    set new-pane.path = {self.root-container.compute-path self}
    {return new-pane}
  }

  {method package {create-drag-view 
                      pointer-x:Distance, 
                      pointer-y:Distance
                  }:View
    {if self.state != PaneState.floating then
        {self.set-status-text
            {hlmessage 
                Hold down the Ctrl key (Command key on Mac) to prevent
                docking. Move the pointer over a title bar to add as a
                tab pane.
            }
        }
    }
||--    def bounds = {self.layout.get-bounds}
||--    let floating-width:Distance = bounds.width
||--    let floating-height:Distance = bounds.height
    let floating-width:Distance = self.floating-width
    let floating-height:Distance = self.floating-height
    let v:View = 
        {OutlineOnlyView
            owner = null,
            vstretch? = true,
            hstretch? = true,
            {DragFeedbackFrame}
        }

    {v.set-window-size floating-width, floating-height}

    let (x:Distance, y:Distance) = 
        {self.transform-to-display-coordinates 0m, 0m}
    let bounds:GRect = {self.layout.get-bounds}
    || Make sure the pointer is inside the dragged window
    let dx:Distance = (pointer-x - x) / bounds.width * floating-width
    let dy:Distance = (pointer-y - y) / bounds.height * floating-height
    {v.set-window-position pointer-x - dx, pointer-y - dy}
    {v.show force-on-display? = false}
    {return v}
  }

  {method package {show-drop-zone
                      x:Distance,
                      y:Distance,
                      drag-view:View
                  }:bool
    {if self.swappable? then
        {return false}
    }
    let grect:GRect = {self.layout.get-cell-bounds}
    let width:Distance = grect.width
    let height:Distance = grect.height
    let title-bar:Graphic = self.title-bar
    let (tx:Distance, ty:Distance) = 
        {title-bar.transform-from-display-coordinates x, y}
    {if {title-bar.contains-point? tx, ty} then
        let (d-x:Distance, d-y:Distance) = 
            {self.transform-to-display-coordinates 0pt, 0pt}
        {drag-view.set-window-position-and-size d-x, d-y, width, height}

        {return true}
    }
    let title-height:Distance = {title-bar.layout.get-cell-bounds}.height
    set (x, y) = {self.transform-from-display-coordinates x, y}
    let (d-x:Distance, d-y:Distance) = 
        {self.transform-to-display-coordinates 0pt, 0pt}
    {if x > 0pt and x < dock-zone-size then
        {drag-view.set-window-position-and-size d-x, d-y, width / 2, height}
        {return true}
     elseif x < width and x > width - dock-zone-size then
        {drag-view.set-window-position-and-size 
            d-x + width / 2, d-y, width / 2, height
        }
        {return true}
     elseif y > title-height and y < title-height + dock-zone-size then
        {drag-view.set-window-position-and-size d-x, d-y, width, height / 2}
        {return true}
     elseif y < height and y > height - dock-zone-size then
        {drag-view.set-window-position-and-size 
            d-x, d-y + height / 2, width, height / 2
        }
        {return true}
    }
    {return false}
  }

  {method package {compute-dock-state
                      x:Distance,
                      y:Distance
                  }:DockingAction
    {if self.swappable? then
        {return DockingAction.swap}
    }
    let title-bar:Graphic = self.title-bar
    let (tx:Distance, ty:Distance) = 
        {title-bar.transform-from-display-coordinates x, y}
    {if {title-bar.contains-point? tx, ty} then
        {return DockingAction.tab}
    }
    let title-height:Distance = {title-bar.layout.get-cell-bounds}.height
    set (x, y) = {self.transform-from-display-coordinates x, y}
    let grect:GRect = {self.layout.get-cell-bounds}
    let width:Distance = grect.width
    let height:Distance = grect.height
    {if x > 0pt and x < dock-zone-size then
        {return DockingAction.left}
     elseif x < width and x > width - dock-zone-size then
        {return DockingAction.right}
     elseif y > title-height and y < title-height + dock-zone-size then
        {return DockingAction.top}
     elseif y < height and y > height - dock-zone-size then
        {return DockingAction.bottom}
    }
    {return DockingAction.none}
  }

  {method package {mark-as-docked}:void
    {self.path.clear}
    set self.pane-group = null
    set self.percent = -1.0
    set self.state = PaneState.docked
    set self.from-tab? = false
    {self.visible-pane-content.sync-focus-to-title-bar}
  }

  {method package {hide content:#PaneContent = null}:void
    {if-non-null pc = self.root-container then
        {pc.hide-pane self, content = content}
    }
  }

  {method package {float dockable?:bool}:void
    {if-non-null pc = self.root-container then
        {pc.float-pane self, dockable?}
    }
  }

  {method package {dock}:void
    {if-non-null pc = self.root-container then
        let floating-view:View = {non-null {self.get-view}}
        set (self.floating-width, self.floating-height) = 
            {floating-view.get-size}
        set (self.floating-x, self.floating-y) = {floating-view.get-position}
        {pc.heuristic-dock-pane-from-path self}
        {floating-view.destroy}
    }
  }

  {method public {insert-pane
                     pane:SinglePane,
||--                     orientation:Orientation = Orientation.vertical,
                     at-top-or-left?:bool = false
                 }:void
    let pg:PaneGroup = {get-parent-pane-group self}
    {pg.insert-pane-in-target
        pane,
        self,
||--        orientation = orientation,
        at-top-or-left? = at-top-or-left?
    }
    {pane.mark-as-docked}
  }

  {method private {pane-with-drag-tab new-content:PaneContent}:TabPane
    set new-content.single-pane = self
    let tab:TabDragger = {new-content.make-tab-dragger}
    let pane:TabPane = {TabPane label = tab, new-content}
    set tab.tab-pane = pane
    {return pane}
  }

  {method private {add-new-tab 
                      tabs:TabContainer,
                      new-content:PaneContent
                  }:void
    let pane:TabPane = {self.pane-with-drag-tab new-content}
    {tabs.add-pane-at-index pane, tabs.tab-panes.size, show? = true}
    set self.title-bar.title = new-content.title
    set self.title-bar.controls = new-content.title-controls
    set new-content.single-pane = self
  }

  {method package {insert-content-as-tab pane:SinglePane}:void
    set self.floating-width = pane.floating-width
    set self.floating-height = pane.floating-height
    set self.floating-x = pane.floating-x
    set self.floating-y = pane.floating-y
    set self.percent = pane.percent
    
    def pg = self.pane-group
    {type-switch pg
     case group:TabbedPaneGroup do
        || add another tab
        {self.add-new-tab group.tc, self.content}
     case group:TiledPaneGroup do
        || create tabbed group
        def subgroup = 
            {TabbedPaneGroup current = 0,
                pane,
                self}
        || replace self with tabbed group
        def index = {group.find self}
        {group.remove-pane-at-index index}
        {group.add-pane-and-resize subgroup, index}
     else
        {error {message Unexpected kind of pane group: {value pg}}}
    
||--    set self.pane-group = pane.pane-group
||--    
||--    {type-switch self.content
||--     case tabs:TabContainer do
||--        {type-switch pane.content
||--         case new-tabs:TabContainer do
||--            {for tab in new-tabs.tab-panes do
||--                {self.add-new-tab tabs, tab.content asa PaneContent}
||--            }
||--         case new-content:PaneContent do
||--            {self.add-new-tab tabs, new-content}
||--        }
||--     case content:PaneContent do
||--        let tabs:TabContainer =
||--            {TabContainer
||--                tab-placement = TabPlacement.bottom,
||--                takes-focus? = false,
||--                {on CurrentPaneChanged do
||--                    {if-non-null content = tabs.current-pane.content then
||--                        let pane-content:PaneContent = 
||--                            content asa PaneContent
||--                        set self.title-bar.title = pane-content.title
||--                        set self.title-bar.controls = 
||--                            pane-content.title-controls
||--                    }
||--                },
||--                background = tab-background-color,
||--                width = {add-stretch after? = true, before? = false},
||--                height = {add-stretch before? = true, after? = false}
||--            }
||--        set self.content = tabs
||--        {tabs.add-pane {self.pane-with-drag-tab content}}
||--        {type-switch pane.content
||--         case new-tabs:TabContainer do
||--            {for tab in new-tabs.tab-panes do
||--                {self.add-new-tab tabs, tab.content asa PaneContent}
||--            }
||--         case new-content:PaneContent do
||--            {self.add-new-tab tabs, new-content}
||--        }
    }
  }

  {method public sealed {fill-initial-tabs 
                            percent:double = -1.0, 
                            current:int = 0,
                            ...:SinglePane
                        }:void
||--    {for sp in ... do
||--        set sp.percent = percent
||--        {self.insert-content-as-tab sp}
||--    }
||--    {(self.content asa TabContainer).show-pane-at-index current}
  }

  {method package {maybe-raise-tab content:PaneContent}:void
||--    {type-switch self.content
||--     case tabs:TabContainer do
||--        {for pane in tabs.tab-panes do
||--            {if pane.content == content then
||--                {tabs.show-pane pane}
||--                {return}
||--            }
||--        }
||--        {error "No tab for ", content.title} ||""
||--    }
  }
  
  {method package {notify-content-title-changed
                      pane-content:PaneContent,
                      title:String
                  }:void
    || Change the title if we're the visible pane.
    {if self.visible-pane-content == pane-content then
        set self.title-bar.title = title
    }
  }

  {method package {record-floating-state}:void
    let floating-view:View = {non-null {self.get-view}}
    set (self.floating-width, self.floating-height) = 
        {floating-view.get-size}
    set (self.floating-x, self.floating-y) = {floating-view.get-position}
  }

  {method package {save-state out:TextOutputStream}:void
    set (self.pane-group, self.percent) = {self.compute-percentage}
    {assert self.percent >= 0, {format "%s", self.percent}}
    set (self.pane-group, self.percent) = {self.compute-percentage}
    {self.save-window-content-state out}
  }

  {method package {save-tabbed-content-state 
                      out:TextOutputStream
                  }:void
    def content = self.content
    {out.write-one '\n'}
    {format
        out = out, 
        {stringify
            {single-pane pane-name = %w,
                floating-x = %s, floating-y = %s,
                floating-width = %s, floating-height = %s
            }},
        content.name,
        self.floating-x, self.floating-y, 
        self.floating-width, self.floating-height
    }        
  }

  {method package {save-window-content-state 
                      out:TextOutputStream
                  }:void
    def content = self.content
    {out.write-one '\n'}
    {format out = out,
        {stringify
            {single-pane pane-name = %w,
                percent = %s, hidden? = %s, state = %w,
                floating-x = %s, floating-y = %s,
                floating-width = %s, floating-height = %s,
                path = %s, from-tab? = %s
            }},
        content.name,
        self.percent, self.hidden?, self.state.name,
        self.floating-x, self.floating-y,
        self.floating-width, self.floating-height,
        {self.path-as-call}, self.from-tab?
    }
  }

  {method private {path-as-call}:StringInterface
    let buf:StringBuf = {StringBuf "\{create-path "}
    {for x key i in self.path do
        {if i != 0 then
            {buf.write-one-string ", "}
        }
        {format out = buf, "%s", x}
    }
    {buf.write-one '\}'}
    {return buf}
  }

  {method public open {on-pointer-envelope-event ev:PointerEnvelopeEvent}:void
    || Any single click on the window should ensure its visible pane is focused.
    || The after 0s is important because the press itself may have changed the
    || the visible pane.
    {type-switch ev.contents 
        case pp:PointerPress do
        {if pp.click-count == 1 then
            {after 0seconds do
                {self.visible-pane-content.request-pane-focus}
||--                {self.visible-pane-content.request-decorations-focus}
            }
        }
    }
    {super.on-pointer-envelope-event ev}
  }
}

||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{define-class public PolyLineMShapeRecord {inherits PolyLineShapeRecord}

  field public mrange  :GISPoint
  field public marray  :{Array-of double}

  let public record-fields:RecordFields = {RecordFields
                                            {RecordField "shape-type",   domain = int},
                                            {RecordField "mbr",          domain = any},
                                            {RecordField "num-parts",    domain = int},
                                            {RecordField "num-points",   domain = int},
                                            {RecordField "part-indices", domain = any},
                                            {RecordField "points",       domain = any},
                                            {RecordField "mrange",       domain = any},
                                            {RecordField "marray",       domain = any}}

  {constructor public {default
                          shape-type:int,
                          mbr:MinimumBoundingRectangle,
                          num-parts:int,
                          num-points:int,
                          part-indices:{Array-of int},
                          points:{Array-of GISPoint},
                          mrange:GISPoint,
                          marray:{Array-of double}
                      }
    {with-compiler-directives allow-slow-spliced-arguments? = true do

        set self.mrange = mrange
        set self.marray = marray
        
        {construct-super
            shape-type,
            mbr,
            num-parts,
            num-points,
            part-indices,
            points
        }
    }
  }

  {factory public {from-Record record:Record}:PolyLineMShapeRecord
    {with-compiler-directives allow-implicit-any-casts? = true do
        {return
            {new PolyLineMShapeRecord,
                record["shape-type"] asa int,
                record["mbr"],
                record["num-parts"] asa int,
                record["num-points"] asa int,
                record["part-indices"],
                record["points"],
                record["mrange"],
                record["marray"]
            }
        }
    }
  }

  {method public {to-RecordData}:RecordData
    def rd = {new RecordData}
    set rd["shape-type"] = self.shape-type
    set rd["mbr"] = self.mbr
    set rd["num-parts"] = self.num-parts
    set rd["num-points"] = self.num-points
    set rd["part-indices"] = self.part-indices
    set rd["points"] = self.points
    set rd["mrange"] = self.mrange
    set rd["marray"] = self.marray
    {return rd}
  }

}
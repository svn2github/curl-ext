||| Copyright (C) 1998-2011, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An Open Curl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0, 8.0 applet}
{curl-file-attributes character-encoding = "windows-latin-1"}
{applet manifest = "../../manifest.mcurl",
    {compiler-directives careful? = true}
}

||| This is a sample applet that illustrates the use of the
||| COM.CURL.EXT.VIEW-ANIMATION package.  The applet displays buttons
||| that can be used to display three different animation effects
||| for posting and closing a View.

{import * from COM.CURL.EXT.VIEW-ANIMATION}


{doc-next
    {purpose
        Return a pacing function defined via cubic Bezier interpolation.
    }
    {parameter (p1, p2),
        Control points that specify the shape of the pacing function.
        These parameters should lie between 0 and 1, and generally
        {param p2} should be greater than or equal to {param p1}.
    }
    {return-vals
        A pacing function that maps an argument between 0 and 1 to
        a result between 0 and 1, based on the shape
        dictated by the parameters {param p1} and {param p2}.
        It will always be the case that the pacing function returns 0
        when the argument is 0,
        and returns 1 when the argument is 1.
    }
}
{define-proc {cubic-bezier p1:double, p2:double}:{proc-type {double}:double}
    {return
        {proc {t:double}:double
            def tbar = 1.0 - t
            {return
                3.0 * tbar * tbar * t * p1 + t * t * (3.0 * tbar * p2 + t)
            }
        }
    }
}




{define-proc {build-view-contents}:Graphic
    def contents =
        {Dialog
            {VBox
                width = 7cm,
                spacing = 8pt,
                {GroupBox label = "Login",
                    {Table
                        {column-prototype
                            halign = "right",
                            width = 2cm,
                            "User name",
                            "Password"
                        },
                        {column-prototype
                            {TextField},
                            {PasswordField},
                            {HBox
                                {Fill},
                                {CheckButton label = "Log in automatically", value = true}
                            },
                            {HBox
                                {Fill},
                                {CommandButton label = "Log In"}
                            }
                        }
                    }
                },
                {GroupBox label = "Identification",
                    {Table
                        {column-prototype
                            halign = "right",
                            width = 2cm,
                            "First name",
                            "Last name"
                        },
                        {column-prototype
                            {TextField},
                            {TextField}
                        }
                    }
                },
                {GroupBox label = "Billing information",
                    {Table
                        {column-prototype
                            halign = "right",
                            width = 2cm,
                            "Division",
                            "Account number"
                        },
                        {column-prototype
                            {DropdownList
                                "Engineering", "Finance", "Operations"
                            },
                            {TextField}
                        }
                    }
                }
            }
        }
    {return contents}
}


{value
    let duration:Time = 0.5s
    let pacing:#{proc-type {double}:double} = null
    
    def dslider =
        {Slider
            domain = {StandardDoubleDomain min-allowable = 0.0, max-allowable = 3.0},
            value = 0.5,
            major-tick-spacing = 0.5,
            minor-tick-spacing = 0.1,
            {on ValueFinished do
                set duration = 1s * (dslider.value asa double)
            }
        }
    
    || Create the radio buttons for selecting the transition pacing:
    def prbhbox = {HBox spacing = 8pt, valign = "top"}
    {prbhbox.add
        {RadioButton
            label = "Linear",
            radio-value = null,
            value = true
        }
    }
    {prbhbox.add
        {RadioButton
            label = "Ease In",
            radio-value = {cubic-bezier 0, 0.5}
        }
    }
    {prbhbox.add
        {RadioButton
            label = "Ease Out",
            radio-value = {cubic-bezier 0.5, 1}
        }
    }
    {prbhbox.add
        {RadioButton
            label = "Ease In & Out",
            radio-value = {cubic-bezier 0, 1}
        }
    }
    {prbhbox.add
        {RadioButton
            label = "Custom",
            radio-value =
                {value
                    || By composing two cubic Bezier curves here, this
                    || pacing function attains a more exaggerated ease-in,
                    || ease-out profile.
                    def ease-in-out = {cubic-bezier 0, 1}
                    def time-map = {cubic-bezier 0.03, 0.97}
                    {proc {t:double}:double
                        {return {ease-in-out {time-map t}}}
                    }
                }
        }
    }
    def prframe =
        {RadioFrame
            prbhbox,
            {on ValueFinished do
                set pacing = prframe.value asa #{proc-type {double}:double}
            }
        }
    
    {HBox spacing = 48pt,
        {Table cell-margin = 4pt,
            {column-prototype
                {CommandButton
                    label = "Display Growing Dialog",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = 
                                    {GrowViewAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                },
                {CommandButton
                    label = "Display Fade-In Dialog",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = {FadeViewAnimator
                                               duration = duration,
                                               pacing = pacing
                                           }
                            }
                        {v.show}
                    }
                },
                {CommandButton
                    label = "Display Genie Dialog",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = {GenieViewAnimator
                                               duration = duration,
                                               pacing = pacing
                                           }
                            }
                        {v.show}
                    }
                },
                {cell-prototype
                    colspan = 3,
                    {CommandButton
                        label = "Run applet in unprivileged mode",
                        {on Action do
                            {relinquish-privilege}
                        }
                    }
                }
            },
            {column-prototype
                {CommandButton
                    label = "Grow / Fade Out",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = 
                                    {GrowViewAnimator
                                        duration = duration,
                                        pacing = pacing
                                    },
                                close-animator =
                                    {FadeViewCloseAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                },
                {CommandButton
                    label = "Fade In / Shrink",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = {FadeViewAnimator
                                               duration = duration,
                                               pacing = pacing
                                           },
                                close-animator =
                                    {ShrinkViewCloseAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                },
                {CommandButton
                    label = "Genie In / Shrink",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = {GenieViewAnimator
                                               duration = duration,
                                               pacing = pacing
                                           },
                                close-animator =
                                    {ShrinkViewCloseAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                }
            },
            {column-prototype
                {CommandButton
                    label = "Grow / Genie Out",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = 
                                    {GrowViewAnimator
                                        duration = duration,
                                        pacing = pacing
                                    },
                                close-animator =
                                    {GenieViewCloseAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                },
                {CommandButton
                    label = "Fade In / Genie Out",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = {FadeViewAnimator
                                               duration = duration,
                                               pacing = pacing
                                           },
                                close-animator =
                                    {GenieViewCloseAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                },
                {CommandButton
                    label = "Genie In / Fade Out",
                    {on Action do
                        def contents = {build-view-contents}
                        def v =
                            {AnimatedView
                                contents,
                                title = "Sample Dialog",
                                center? = true,
                                animator = {GenieViewAnimator
                                               duration = duration,
                                               pacing = pacing
                                           },
                                close-animator =
                                    {FadeViewCloseAnimator
                                        duration = duration,
                                        pacing = pacing
                                    }
                            }
                        {v.show}
                    }
                }
            }
        },
        {VBox spacing = 10pt,
            {VBox spacing = 2pt,
                dslider,
                {hcenter "Transition Duration"}
            },
            {VBox spacing = 2pt,
                prframe,
                {hcenter "Pacing"}
            }
            
        }
    }
}

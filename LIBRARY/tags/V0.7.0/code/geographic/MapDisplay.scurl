||| Maintained by: kodan

{doc-next
    {purpose Class that manages the display.}
}
{define-class public MapDisplay
  
  field public canvas:NotifyingCanvas
  
||--  ||--
||--  field public scale-slider:ScaleSlider
||--  field public domain:Domain
  
  field public manager:MapLayerManager
  field public current-scale:double = 1.0
  field public scale-delta:double = 1.0
  field public mbr:#MinimumBoundingRectangle
  
  {constructor public {default manager:MapLayerManager}
    
    set self.canvas = {NotifyingCanvas
                          width = {make-elastic},
                          height = {make-elastic},
                          background = "#1A1A1A",
                          parent-graphic = self,
                          manager
                      }
    || apply the transformation when canvas is resized
    {self.canvas.add-event-handler
        {on e:ValueChanged at c:Canvas do
            {for s:Shape in self.canvas.shape-children do
                {s.set-transformation
                    {with-compiler-directives 
                        allow-implicit-any-casts? = true do
                        {self.geo-scale-transform 
                            c.actual-width, 
                            c.actual-height}
                    }
                }
                
                {for as:Shape in s.shape-children do
                    let area-shape:AreaShape = (as asa AreaShape)
                    {area-shape.change-ellipse-size 
                        area-shape.parent-layer.ellipse-radius}
                }
            }
        }
    }
    
    ||--
||++set self.domain = {StandardDoubleDomain
||++                      default-value = 1.0,
||++                      min-allowable = 1.0,
||++                      max-allowable = 10.0}
||++set self.scale-slider =
||++    {ScaleSlider width = 29pt, domain = self.domain, height = 200pt,
||++        {on e:ValueFinished at s:ScaleSlider do
||++            let stop-watch:DateTime = {DateTime}
||++            {for shape:Shape in self.canvas.shape-children do
||++                set shape.visible? = false
||++                {with-compiler-directives 
||++                    allow-implicit-any-casts? = true do
||++                    {shape.set-transformation
||++                        {self.geo-scale-transform
||++                            self.canvas.actual-width,
||++                            self.canvas.actual-height,
||++                            scale-delta = s.value,
||++                            shape = shape
||++                        }
||++                    }
||++                    set self.scale-delta = s.value
||++                }
||++                ||set s.stroke-thickness = 1pt / self.current-scale
||++                {for as:Shape in shape.shape-children do
||++                    let area-shape:AreaShape = (as asa AreaShape)
||++                    {area-shape.change-ellipse-size 
||++                        area-shape.parent-layer.ellipse-radius}
||++                }
||++                set shape.visible? = true
||++            }
||++        }
||++    }
||++{self.canvas.add self.scale-slider, x = 20pt}
    
    set self.manager = manager
    
  }
  
  {getter public {center}:Distance2d
    let center:Distance2d = {Distance2d 
                                self.canvas.actual-width / 2,
                                self.canvas.actual-height / 2
                            }
    {return center}
  }
  
  {method protected {add-layer layer:SingleMapLayer}:void
    {self.canvas.add layer.shape-group}
    set self.mbr = {self.get-mbr}
  }
  
  {method protected {remove-layer layer:SingleMapLayer}:void
    {layer.shape-group.detach}
    set self.mbr = {self.get-mbr}
  }

  {method protected {re-calculate-size-and-position layer:SingleMapLayer}:void
    let first-shape:#SingleMapLayer
    {for s:SingleMapLayer in self.manager.layers do
        set first-shape = s
        {break}
    }
    let tf:Transformation2d = {first-shape.shape-group.transformation.clone}
    {layer.shape-group.set-transformation tf}
    {for as:Shape in layer.shape-group.shape-children do
        let area-shape:AreaShape = (as asa AreaShape)
        {area-shape.change-ellipse-size 
            area-shape.parent-layer.ellipse-radius}
    }
  }
  
  {method public {geo-scale-transform
                        width:Distance, 
                        height:Distance,
                        scale-delta:double = 1.0, 
                        shape:#Shape = null
                    }:Transformation2d
    let xfm:Transformation2d = {Transformation2d}
    
    let geo-width :Distance = self.mbr.width * 1mm
    let geo-height:Distance = self.mbr.height * 1mm
    
    let scale-x:double = width / geo-width
    let scale-y:double = height / geo-height
    let scale:double = {min scale-x, scale-y}
    set self.current-scale = scale * scale-delta
    
    {xfm.global-translate
        -self.mbr.minx * self.current-scale * 1mm + 
        (self.center.x - geo-width * self.current-scale / 2),
        self.mbr.maxy * self.current-scale * 1mm +
        (self.center.y - geo-height * self.current-scale / 2)}
    
    {xfm.local-scale scale * scale-delta, -scale * scale-delta}
    {return xfm}
  }
  
  {method package {get-mbr}:MinimumBoundingRectangle
    let most-minx:double = infinity
    let most-miny:double = infinity
    let most-maxx:double = -infinity
    let most-maxy:double = -infinity
    
    {for layer:SingleMapLayer in self.manager.layers do
        || calculate MinimumBoundingRectangle
        let minx:double = layer.file-header-info.mbr.minx
        let miny:double = layer.file-header-info.mbr.miny
        let maxx:double = layer.file-header-info.mbr.maxx
        let maxy:double = layer.file-header-info.mbr.maxy
        
        {if most-minx > minx then set most-minx = minx}
        {if most-miny > miny then set most-miny = miny}
        {if most-maxx < maxx then set most-maxx = maxx}
        {if most-maxy < maxy then set most-maxy = maxy}
    }
    
    {return
        {MinimumBoundingRectangle
            most-minx, most-miny,
            most-maxx, most-maxy}}
  }
  
}
||| Maintained by: kodan

{define-class public AreaShape {inherits ShapeGroup}
  
  field public object-id:int
  field public shape-record:ShapeRecord
  field public selected?:bool
  field public dbf-data:Record
  field public parent-layer:SingleMapLayer
    
  {constructor public {default
                          shape-record:ShapeRecord,
                          dbf-data:Record,
                          parent-layer:SingleMapLayer,
                          color:FillPattern,
                          selected?:bool = false,
                          object-id:int = -1,
                          ...
                      }
    {construct-super {splice ...}}
    set self.color = color
    set self.dbf-data = dbf-data
    set self.shape-record = shape-record
    set self.selected? = selected?
    set self.object-id = object-id
    set self.parent-layer = parent-layer
    
    let polygons:{Array-of {Array-of Double2d}} = 
        {self.shape-record.to-polygons}
    {for polygon:{Array-of Double2d} in polygons do
        {switch shape-record.shape-type
            ||TO DO
            ||case 0  do {self.create-region-shape polygon} 
         case 1  do {self.create-ellipse-shape polygon}
         case 3  do {self.create-path-shape polygon}
         case 5  do {self.create-region-shape polygon}
            ||case 8  do {self.create-ellipse-shape polygon} 
            ||case 11 do {self.create-ellipse-shape polygon} 
            ||case 13 do {self.create-path-shape polygon}
            ||case 15 do {self.create-region-shape polygon}
            ||case 18 do {self.create-ellipse-shape polygon}
            ||case 21 do {self.create-ellipse-shape polygon}
            ||case 23 do {self.create-path-shape polygon}
            ||case 25 do {self.create-region-shape polygon}
            ||case 28 do {self.create-ellipse-shape polygon}
            ||case 31 do 
         else
            ||TO DO
            ||{self.create-region-shape polygon}
            {output "error : shape-type=" & self.shape-record.shape-type}
        }
    }
  }
  
  {method protected {create-path-shape
                        polygon:{Array-of Double2d}
                    }:void
    let mbr:MinimumBoundingRectangle = self.parent-layer.file-header-info.mbr
    let newp:Double2d = {Double2d polygon[0].x, polygon[0].y}
    let dis2d:Distance2d = {Distance2d newp.x * 1mm, newp.y * 1mm}
    let path:Path = {Path dis2d}
    
    {for i:int = 1 below polygon.size do
        set newp = {Double2d polygon[i].x, polygon[i].y}
        set dis2d = {Distance2d newp.x * 1mm, newp.y * 1mm}
        {path.line-to dis2d}
    }
    {self.add
        {PathShape
            stroke-thickness = 0.001px,
            path
        }
    }
  }
  
  {method protected {create-ellipse-shape
                        polygon:{Array-of Double2d}
                    }:void
    
    let mbr:MinimumBoundingRectangle = self.parent-layer.file-header-info.mbr
    let newp:Double2d
    {for p in polygon do
        set newp = p
    }
    let ellipse-shape:EllipseShape = 
        {EllipseShape
            {GRect 
                0pt, 
                0.1pt,||0.01pt,
                0pt, 
                0.1pt ||0.01pt
            },
            color = self.parent-layer.region-color,
            border-color = FillPattern.navy}
    {let transformation:Transformation2d = {Transformation2d}}
    {transformation.local-translate newp.x * 1mm, newp.y * 1mm}
    {ellipse-shape.set-transformation transformation}
    
    {self.add ellipse-shape}
  }
  
  {method public {create-region-shape
                     polygon:{Array-of Double2d}
                 }:void
    let vertices:{FastArray-of Distance2d} = 
        {{FastArray-of Distance2d}.from-size
            polygon.size,
            {Distance2d 0pt, 0pt}
        }
    let mbr:MinimumBoundingRectangle = self.parent-layer.file-header-info.mbr
    {for p key index:int in polygon do
        {vertices.set index, p * 1mm}
    }
    
    let region:Region = {Region.from-vertex-array 
                            {{Array-of Distance2d}.from-FastArray 
                                vertices}}
    let region-shape:RegionShape = 
        {RegionShape region,
            border-color = self.parent-layer.region-color,
            border-width = 0px
        }
    
    {self.add region-shape}
  }
  
  {method public {change-ellipse-size radius:Distance}:void
    let current-scale:double = 
        self.parent-layer.manager.map-display.current-scale
    {for s:Shape in self.shape-children do
        {if not s isa EllipseShape then
            {continue}
        }
        let ellipse-shape:EllipseShape = s asa EllipseShape
        let grect:GRect = {GRect 
                              0pt, 
                              radius / current-scale,
                              0pt, 
                              radius / current-scale
                          }
        set ellipse-shape.rectangle = grect
    }
  }
  
}

||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{define-class public PointZShapeRecord {inherits PointMShapeRecord}
  
  field public z:double
  
  let public record-fields:RecordFields = {RecordFields
                                            {RecordField "shape-type", domain = int},
                                            {RecordField "x", domain = double},
                                            {RecordField "y", domain = double},
                                            {RecordField "z", domain = double},
                                            {RecordField "m", domain = double}
                                          }

  {constructor public {default
                          shape-type:int,
                          x         :double,
                          y         :double,
                          z         :double,
                          m         :double
                      }
    set self.z = z

    {construct-super shape-type, x, y, m}
  }

  {factory public {from-Record record:Record}:PointZShapeRecord
    {with-compiler-directives allow-implicit-any-casts? = true do
        {return
            {PointZShapeRecord
                record["shape-type"] asa int,
                record["x"],
                record["y"],
                record["z"],
                record["m"]
            }
        }
    }
  }
  
  {method public {to-RecordData}:RecordData
    let record-data:RecordData = {RecordData}
    set record-data["shape-type"] = self.shape-type
    set record-data["x"] = self.x
    set record-data["y"] = self.y
    set record-data["z"] = self.z
    set record-data["m"] = self.m
    {return record-data}
  }

  ||TO DO "Z,m element??"
  |#
  {method public {to-polygons
                     min-area:double = 0.125,
                     filter-tolerance:double = 0.375
                 }:{Array-of {Array-of Double2d}}
    let point:Double2d = {Double2d self.x, self.y}
    let array1:{Array-of Double2d} = {{Array-of Double2d} point}
    let array2:{Array-of {Array-of Double2d}} = {{Array-of {Array-of Double2d}} array1}

    {return array2}
  }
  #|
  
}


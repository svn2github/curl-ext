||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
|| polygon area
|| -------------------
{define-proc public {polygon-area ps:{Array-of Double2d}}:double
    || use local coordinates
    def p0 = ps[ps.size - 1]
    || integrate around polygon
    let a:double = 0
    let p1:Double2d = {Double2d 0, 0}
    {for p in ps do
        def p2 = p - p0
        def da = p2.x * p1.y - p1.x * p2.y
        {inc a, da}
        set p1 = p2}
    {return {abs a}}
}

|| path filtering
|| --------------------
{define-proc public {filter-points
                        ps:{Array-of Double2d},
                        eps:double
                    }:{Array-of Double2d}
    {if ps.size < 8 then
        {return ps}}
    def is = {filter-points-buf}
    || recursive subdivision:
    || - find point furthest from segment
    def f =
        {proc {i0:int, i1:int}:void
            def p0 = ps[i0]
            def p1 = ps[i1]
            def dp = p1 - p0
            def u = {rot90.transform-point dp * 1m}
            def v = {u.direction}
            let dmax:double = 0
            let imax:int = -1
            {for i = i0 + 1 below i1 do
                def d = {abs {dot-product v, ps[i] - p0}}
                {if d > dmax then
                    set dmax = d
                    set imax = i}}
            {if dmax > eps then
                {is.insert imax}
                {f i0, imax}
                {f imax, i1}}
        }
    def last = ps.size - 1
    || check polygon closure
    def dp = ps[0] - ps[last]
    {if dp.magnitude < eps then
        || closed: split at midpoint
        || TODO: better split at farthest point
        def mid = last div 2
        {is.insert 0}
        {is.insert mid}
        {f 0, mid}
        {f mid, last}
     else
        || open: normal processing
        {is.insert 0}
        {is.insert last}
        {f 0, last}}
    def qs =
        {ps.filter-keys-clone
            {fn i => {is.member? i}}}
    {return qs}
}
{def rot90 =
    {value
        def xfm = {Transformation2d}
        {xfm.local-rotate 90deg}
        xfm}
}
{def _filter-points-buf =
    {{Set-of int}}
}
{define-proc {filter-points-buf}:{Set-of int}
    {_filter-points-buf.clear}
    {return _filter-points-buf}
}

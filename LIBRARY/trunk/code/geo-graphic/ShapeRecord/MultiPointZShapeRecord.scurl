||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{define-class public MultiPointZShapeRecord {inherits MultiPointMShapeRecord}

  field public zrange:GISPoint
  field public zarray:{Array-of double}
  
  let public record-fields:RecordFields = {RecordFields
                                            {RecordField "shape-type",   domain = int},
                                            {RecordField "mbr",          domain = any},
                                            {RecordField "num-points",   domain = int},
                                            {RecordField "points",       domain = any},
                                            {RecordField "zrange",       domain = any},
                                            {RecordField "zarray",       domain = any},
                                            {RecordField "mrange",       domain = any},
                                            {RecordField "marray",       domain = any}
                                          }
  
  {constructor public {default
                          shape-type:int,
                          mbr:MinimumBoundingRectangle,
                          num-points:int,
                          points:{Array-of GISPoint},
                          zrange:GISPoint,
                          zarray:{Array-of double},
                          mrange:GISPoint,
                          marray:{Array-of double}
                      }
    set self.zrange = zrange
    set self.zarray = zarray
    
    {construct-super shape-type, mbr, num-points, points, mrange, marray}
  }

  {factory public {from-Record record:Record}:MultiPointZShapeRecord
    {with-compiler-directives allow-implicit-any-casts? = true do
        {return
            {MultiPointZShapeRecord
                record["shape-type"] asa int,
                record["mbr"],
                record["num-points"] asa int,
                record["points"],
                record["zrange"],
                record["zarray"],
                record["mrange"],
                record["marray"]
            }
        }
    }
  }

  {method public {to-RecordData}:RecordData
    let rd:RecordData = {RecordData}
    set rd["shape-type"] = self.shape-type
    set rd["mbr"] = self.mbr
    set rd["num-points"] = self.num-points
    set rd["points"] = self.points
    set rd["zrange"] = self.zrange
    set rd["zarray"] = self.zarray
    set rd["mrange"] = self.mrange
    set rd["marray"] = self.marray
    {return rd}
  }

  
}
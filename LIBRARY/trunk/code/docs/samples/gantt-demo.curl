||| Maintained by: mgordon
{curl 7.0 applet}
{applet manifest = "manifest.mcurl",
    {compiler-directives careful? = true}
}

|# To Do

  o provide a way to choose a data directory


#|

{document-style PlainDocument}
{set-document-properties
    background = "#f0f0f0",
    hstretch? = true,
    vstretch? = true,
    font-size = 9pt
}
{import * from CURL.LANGUAGE.SOURCE}
{import * from CURL.IO.JSON}
{import * from CURL.UTIL.OBSERVER}
{import * from CURL.GUI.STANDARD}
{import * from CURL.GUI.SHAPES}
{import * from CURL.GUI.CHARTS}
||--{import * from COM.CURL.EXT.PROTOTYPES}
{title heading? = false, Gantt Demo}

{import * from CURL.DATA-ACCESS.BASE}
{import * from COM.CURL.EXT.GUI}
{import * from COM.CURL.EXT.DATA-ACCESS}
{import * from COM.CURL.EXT.GANTT}

|| Use persistent data to remember location for data files
{persistent-data "gantt/gantt-demo", duration=180days}
{def file-locator =
    {PersistedLocation 
        "gantt-demo", directory? = true, ||""
        title = {lmessage Gantt Data Directory}}
}

|| -------------------------------------------------------------------------

{def critical-color:FillPattern = "crimson"}
{def vacation-color:FillPattern = "#90e0ff80"}
{def busy-color:FillPattern = "#f0f09080"}
{def free-color:FillPattern = "white"}
{def task-label-width = 144pt}

{install-style-sheet
    {StyleSheet
        {StyleRule "Slider/panel",
            margin = 0pt
        }
||--        ,
||--        {StyleRule "Slider",
||--            font-size = 8pt,
||--            vorigin = 0.4,
||--            skin = null
||--        }
    }
}

|| -------------------------------------------------------------------------

{define-class public open UIFrame {inherits BaseFrame}

  field public-set protected-get app:GanttDemoApp

  field protected upper-frame:Frame = {uninitialized-value-for-type Frame}

  field protected button-bar:HBox = {uninitialized-value-for-type HBox}

  {constructor public {default 
                          app:GanttDemoApp,
                          content:Graphic = {hlmessage (empty)},
                          ...
                      }
    {construct-super ...}
    set self.app = app
    {self.add-internal {self.make-panel content}}
  }
  
  {method protected open {make-panel
                             content:Graphic,
                             ...:Graphic
                         }:Graphic
    set self.upper-frame = {Frame hstretch? = true, vstretch? = true, content}
    set self.button-bar = {HBox width = {add-stretch}, spacing = 2px}
    {self.add-button-items ..., clear? = true}
    {return
        {VBox
            hstretch? = true,
            height = {add-stretch},
            spacing = 6pt,
            self.upper-frame
        }
    }
  }

  {method public {add g:any, ...}:#Visual
    {self.upper-frame.add replace? = true, g, {splice ...}}
    {return self}
  }

  {method public {add-button-items clear?:bool = false,  ...:Graphic}:void
    {if clear? then
        {self.button-bar.clear}
||--        {self.button-bar.add {Fill}}
    }
    {for g:Graphic in ... do
        {self.button-bar.add g}
    }
  }
}


{define-class public open GanttDemoApp {inherits FileApp, Frame}

  {doc-next 
    {purpose Cache the last value so we can stop observing it when it changes.}
  }
  field protected _project-model:#ProjectModel

  field public toolbar:Graphic

  field public button-box:Frame = 
      {Frame halign = "left", width = {add-stretch}}

  field public main-panel:Graphic

  field public settings-store:DataStore =
      {uninitialized-value-for-type DataStore}

  {method public open {get-settings-location nloc:#Url = null}:Url
    def loc = {if-non-null nloc then nloc else self.file-location}
    {return {loc.concat "settings.json"}}
  }

  {getter protected {initial-settings}:JsonObject
    def today = {DateTime.date}
    {return
        {JsonObject
            "application",
            {JsonObject
                "begin-date", 
                {DateTime.date
                    today, month = today.info.month, day = 1
                }.info.iso-date,
                "end-date",
                {DateTime.date
                    today, month = today.info.month + 2, day = 31
                }.info.iso-date
            }
        }
    }
  }

  {constructor public {default
                          ...
                      }

    {construct-super.FileApp "Gantt Demo"}
    {construct-super.Frame hstretch? = true, vstretch? = true, {splice ...}}

    let location:Url = self.untitled-file-url
    set self.last-save-edit-count = self.edit-count
    {if file-locator.saved-url == null then
        {if Dialog.yes ==
            {popup-question
                title = {hlmessage Create new Data Directory?},
                {Frame
                    width = 4in,
                    {text
                        {hlmessage
                            This applet demonstrates the Gantt chart
                            package.  The first time you run it, you
                            must choose a directory where the project
                            model will be saved.
                        }
                        
                        {hlmessage Do you wish to continue?}
                    }
                }
            }
         then
            {if-non-null new-loc = {file-locator.get-url choose? = true} then
                set location = new-loc
             else
                {exit 0}
            }
         else
            {exit 0}
        }
    }

    {if location == self.untitled-file-url then
        {if-non-null loc = {file-locator.get-url} then
            set location = loc
         else
            {exit 0}
        }
    }

    set self.toolbar = {self.make-toolbar}
    set self.settings-store = {DataStore self.initial-settings}
    {self.initialize-settings location}

    ||FIXME: store begin/end somewhere and use data binding
    set self.project-model =
        {ProjectModel
            data-dir = location,
            {self.settings-store.get-DateTime "application.begin-date"}, ||""
            {self.settings-store.get-DateTime "application.end-date"} ||""
        }

    set self.main-panel = {self.make-main-panel}
    {self.add
        {VBox
            self.toolbar,
            self.main-panel
        }
    }

    {self.update-file-info location, true}
    {self.settings-store.refresh}
    {self.request-update-commands}
    {self.project-model.refresh}
    {self.note-file-saved}
  }

  {method protected open {initialize-settings location:Url}:void
    {try
        {self.settings-store.load {self.get-settings-location nloc = location}}
     catch e:Exception do
        {self.settings-store.set "$", self.initial-settings}
    }
  }

  {nonlocal-option public project-model:#ProjectModel
    {if-non-null pm = self._project-model then
        {self.stop-observing pm}
    }
    set self._project-model = project-model
    {if-non-null pm = project-model then
        {self.observe pm}
    }
  }


  {method protected {handle-observer-message
                        sender:Observable, message:any
                    }:void
    {if message == "save-needed" then
        {self.note-edited}
    }
  }

  {method public open {make-main-panel}:Graphic
    def panel =
        {Dialog
            {TabContainer
                margin = 9pt,
                width = {add-stretch},
                height = {make-elastic preferred-size = 1m},
                {self.make-gantt-ui},
                {self.make-resource-ui},
                {self.make-calendar-ui}
            }
        }
    {return panel}
  }

  {method public open {make-toolbar}:Graphic
    
    def tb =
        {HBox
            spacing = 3pt,
            margin = 1pt,
            {SkinnableFrame
                {MenuBar
                    background = "transparent",
                    width = 1.5in,
                    {self.get-file-menu}
                },
                skin = 
                    {ShadedSkinSpec
                        "#e8e8f8",
                        "#f8f8ff",
                        corner-radius = 0pt,
                        border-color = "silver",
                        highlight-alpha-1 = 0.0,
                        highlight-alpha-2 = 0.0
                    }
            },
            self.button-box,
            {Fill}
        }
    {return tb}
  }

  {method public open {make-resource-ui}:Graphic
    def ui = {ResourceUI self}
    def pane =
        {TabPane
            label = {hlmessage Resources},
            ui,
            {on e:TabPaneShown at tp:TabPane do
                {self.button-box.add replace? = true, ui.button-bar}
            }
        }
    {return pane}
  }

  {method public open {make-gantt-ui}:Graphic
    def ui = {ScheduleUI self}
    def pane = 
        {TabPane
            label = {hlmessage Schedule},
            ui,
            {on e:TabPaneShown at tp:TabPane do
                {self.button-box.add replace? = true, ui.button-bar}
            }
        }
    {return pane}
  }

  {method public open {make-calendar-ui}:Graphic
    def ui = {CalendarUI self}
    def pane =
        {TabPane
            label = {hlmessage Calendar},
            ui,
            {on e:TabPaneShown at tp:TabPane do
                {self.button-box.add replace? = true, ui.button-bar}
            }
        }
    {return pane}
  }

  || ----------
  || Overrides
  || ----------

  {method public open {file-open}:void
    {if {self.confirm-close} then
        let location:#Url = 
            {choose-directory
                title = {hlmessage Choose Directory for Project}
            }

        {if-non-null file-url = location then
            {self.do-file-open file-url}
            {self.update-file-info location, true}
        }
        {self.request-update-commands}
    }
  }

  {method public open {file-save-as}:void

    let location:#Url = 
        {choose-directory
            title = {hlmessage Save As...}
        }
    {if-non-null file-url = location then
        {self.do-file-save-as file-url}
    }
  }

  {method public open {do-file-open file-url:Url}:void
    {file-locator.persist-url file-url}
    {self.initialize-settings file-url}
    set self.project-model =
        {ProjectModel
            data-dir = file-url,
            {self.settings-store.get-DateTime "application.begin-date"}, ||""
            {self.settings-store.get-DateTime "application.end-date"} ||""
        }
  }

  {method public open {do-file-new}:void
    {if-non-null new-loc = {file-locator.get-url choose? = true} then
        {self.settings-store.set "$", self.initial-settings}
        set self.project-model =
            {ProjectModel
                data-dir = new-loc,
                {self.settings-store.get-DateTime "application.begin-date"}, ||""
                {self.settings-store.get-DateTime "application.end-date"} ||""
            }
    }
  }

  {method public open {do-file-save}:void
    {self.project-model.commit}
    {self.settings-store.save {self.get-settings-location}}
  }

  {method public open {do-file-save-as directory-url:Url}:void
    {file-locator.persist-url directory-url}
    {self.project-model.save-as directory-url}
    {self.settings-store.save {self.get-settings-location nloc = directory-url}}
  }
}

|| -------------------------------------------------------------------------

|| ----------
|| Resources
|| ----------

{define-class public open ResourceUI {inherits UIFrame}

  field public resource-grid:RecordGrid =
      {uninitialized-value-for-type RecordGrid}

  {nonlocal-option public project-model:#ProjectModel
    {if-non-null pm = project-model then
        set self.resource-grid =
            {RecordGrid
                record-source = pm.resources.rs,
                name = "resource-grid",
                width = 5in,
                height = {add-stretch},
                select-current-record? = true,
                display-navigation-panel? = false,
                display-filler-column? = true,
                background = "#eeeeee",
                key-spec = "id",
||--        sort-spec = "mod-date DESC",
                alternate-row-background="#f0f0f0",
                automatic-columns? = false,
                {RecordGridColumn  width=48pt, "name"},
||--                {RecordGridColumn  width=24pt, "id"},
                {RecordGridColumn  width=48pt, "type"},
                {RecordGridColumn  width=36pt, "initials"},
                {RecordGridColumn  width=48pt, "group"},
                {RecordGridColumn  width=36pt, "link"},
                {RecordGridColumn  width=36pt, "max-load"}
            }
        {self.resource-grid.add-command
            {NewResourceCommand pm.resources, self.resource-grid}
        }
        {self.add self.resource-grid}
        {self.add-button-items clear? = true,
            {CommandButton
                height = 18pt,
                label = {lmessage Add...},
                tooltip = {hlmessage Add Resource},
                bound-command = 
                    {self.resource-grid.get-command "new-resource"} ||""
            },
            {CommandButton label="Delete", 
                bound-command = {self.resource-grid.get-command "delete"}
            }
        }
     else
        {self.add
            {hlmessage There is no project model.}
        }
        {self.add-button-items clear? = true}
    }
  }

||--  || This serves as a "constant" that is the RecordSet of resources
||--  {define-proc public {get-resource-rs}:#RecordSet
||--    {if-non-null pm = self.project-model then
||--        {return pm.resources.rs}
||--    }
||--    {return null}
||--  }

  {constructor public {default app:GanttDemoApp, ...}
    {construct-super app, {splice ...}}
  }

}

{define-proc public {get-resource-rs}:RecordSet
    {if-non-null pm = ScheduleUI._pm then
        {return pm.resources.rs}
    }
    {error
        {hlmessage
            Internal error: The project model contains no resource table.
        }
    }
}

{define-class public open ScheduleUI {inherits UIFrame}

  field public begin-date-ctl:DateField =
      {uninitialized-value-for-type DateField}

  field public end-date-ctl:DateField =
      {uninitialized-value-for-type DateField}

  field public scale:CalendarScale =
        {uninitialized-value-for-type CalendarScale}

  let package _pm:#ProjectModel

  || This serves as a "constant" that is the RecordSet of resources
  field public gantt-grid:TreeGrid =
      {uninitialized-value-for-type TreeGrid}

  {nonlocal-option public project-model:#ProjectModel
    {if-non-null pm = project-model then
        set ScheduleUI._pm = project-model
||--        set self.begin-date-ctl.value = project-model.begin-date
||--        set self.end-date-ctl.value = project-model.end-date
        set self.scale =
            {CalendarScale
                border-color = "black", border-width = 0pt,
                background = "transparent",
                font-weight = "normal",
                alternate-row-background = "white",
                {CalendarScaleSpec
                    pm.min-date, pm.max-date,
                    workdays-only? = true
                },
                tall? = true
            }
        ||FIXME: Observe _pm and if dates change, update self.scale

        def tm = {RecordSetTreeModel pm.tasks.rs, id-field = "id"}
        set self.gantt-grid =
            {TreeGrid
                tm,
                name = "gantt-grid", ||""
                width = {add-stretch},
                height = {add-stretch},
                project-model = pm,
                select-current-record? = true,
                display-navigation-panel? = false,
                display-filler-column? = true,
                background = "#eeeeee", ||""
                alternate-row-background="#f0f0f0", ||""
                automatic-columns? = false,
                {RecordGridColumn  "name", ||""
                    edit-on-focus? = true, ||FIXME: drag/drop does not work if editing
                    width = 120pt, cell-spec = ExpanderCell
                },
                {RecordGridColumn
                    width=48pt, "owner", ||""
                    cell-spec = ForeignKeyCell
                },
                {RecordGridColumn  width=36pt, "effort"}, ||""
                {RecordGridColumn  width=48pt, "status"}, ||""
                {RecordGridColumn  "begin", ||""
                    width = {make-elastic preferred-size = .5m},
                    header-spec = self.scale,
                    cell-spec = make-gantt-cell
                }
            }
        {self.gantt-grid.add-command {EditTaskCommand pm, self.gantt-grid}}
        {self.gantt-grid.add-command {NewTaskCommand pm, self.gantt-grid}}
        {self.gantt-grid.add-command {NewSubtaskCommand pm, self.gantt-grid}}

        {self.add
            self.gantt-grid
        }

        || Request a warning dialog if deleting a parent task
        def dc = {self.gantt-grid.get-command "Tree.delete-node"} ||""
                 asa DeleteNodeCommand
        set dc.warn? = true

        {self.add-button-items clear? = true,
            {CommandButton
                label = {hlmessage Add Task},
                bound-command =
                    {self.gantt-grid.get-command "Gantt.add-task"} ||""
            },
            {CommandButton
                label = {hlmessage Add Subtask},
                bound-command =
                    {self.gantt-grid.get-command "Gantt.add-subtask"} ||""
            },
            {CommandButton
                label = {hlmessage Edit Task},
                bound-command =
                    {self.gantt-grid.get-command "Gantt.edit-task"} ||""
            },
            {CommandButton label="Delete Task", 
                bound-command =
                    {self.gantt-grid.get-command "Tree.delete-node"} ||""
            },
            {Fill width = {make-elastic
                              preferred-size = 1m,
                              compress-order = compliant-stretch-order
                          }
            },
            {Label halign = "right",
                {hlmessage Begin Date:}
            },
            self.begin-date-ctl,
||--            {Fill width = 6pt},
||--            {Label width = .5in, halign = "right",
||--                {hlmessage To:}
||--            },
||--            self.end-date-ctl,
            {Fill width = 6pt}
        }
||--        {self.app.settings-store.refresh}
     else
        {self.add
            {hlmessage There is no project model.}
        }
        {self.add-button-items clear? = true}
    }
  }

  {constructor public {default app:GanttDemoApp, ...}
    {construct-super app, {splice ...}}

    set self.begin-date-ctl =
        {DateField
            width = 72pt,
            {bind value to "application.begin-date" ||
                in  self.app.settings-store,
                {format v:String as
                    {dump "format", v}
                    {DateTime.date v}
                },
                {parse v:DateTime as
                    {dump "parse", v}
                    v.info.iso-date
                }
            },
            {on e:ValueFinished at ctl:DateField do
                {if-non-null dt = ctl.value then
                    {ctl.update-data-binding "value"}
                    ||FIXME: Can the data-store update cause this to happen?
                    set self.project-model.begin-date = dt
                    {self.refresh-calendar}
                }
            }
        }

    set self.end-date-ctl =
        {DateField
            width = 72pt,
            {on e:ValueFinished at ctl:DateField do
                {if-non-null dt = ctl.value then
                    set self.project-model.end-date = dt
                }
            }
        }
  }

  {method public {refresh-calendar}:void
    {if-non-null pm = self.project-model then
        set self.scale.spec.min-date = pm.min-date
        set self.scale.spec.max-date = pm.max-date
        {self.scale.note-spec-changed}

||--        set self.scale =
||--            {CalendarScale
||--                border-color = "black", border-width = 0pt,
||--                background = "transparent",
||--                font-weight = "normal",
||--                alternate-row-background = "white",
||--                {CalendarScaleSpec
||--                    pm.begin-date, pm.end-date,
||--                    workdays-only? = true
||--                },
||--                tall? = true
||--            }
||--        set self.gantt-grid.columns[4].header-spec = self.scale
||--        set self.gantt-grid.columns[4].color = "blue"
    }
  }
}

{define-class public open DependenciesUI {inherits UIFrame}

  field public deps-grid:RecordGrid =
      {uninitialized-value-for-type RecordGrid}

  {nonlocal-option public project-model:#ProjectModel
    {if-non-null pm = project-model then
        set self.deps-grid =
            {RecordGrid
                name = "deps-grid",
                width = 4in,
                height = 4in,
                select-current-record? = true,
                display-navigation-panel? = false,
                display-filler-column? = true,
                background = "#eeeeee",
                record-source = pm.dependencies.rs,
                key-spec = "id",
||--        sort-spec = "mod-date DESC",
                alternate-row-background="#f0f0f0",
                automatic-columns? = false,
                {RecordGridColumn  width=24pt, "id"},
                {RecordGridColumn  width=24pt, "scenario"},
                {RecordGridColumn  width=24pt, "basescenario"},
                {RecordGridColumn  width=48pt, "type"},
                {RecordGridColumn  width=36pt, "ida"},
                {RecordGridColumn  width=36pt, "idb"},
                {RecordGridColumn  width=36pt, "delay"}
            }
        {self.add self.deps-grid}
        {self.add-button-items clear? = true
        }
     else
        {self.add
            {hlmessage There is no project model.}
        }
        {self.add-button-items clear? = true}
    }
  }

  {constructor public {default app:GanttDemoApp, ...}
    {construct-super app, {splice ...}}
  }
}

{define-class public open CalendarUI {inherits UIFrame}

  field public event-grid:RecordGrid =
      {uninitialized-value-for-type RecordGrid}

  {nonlocal-option public project-model:#ProjectModel
    {if-non-null pm = project-model then
        set self.event-grid =
            {RecordGrid
                name = "event-grid",
                width = 6in,
                height = 4in,
                select-current-record? = true,
                display-navigation-panel? = false,
                display-filler-column? = true,
                background = "#eeeeee",
                record-source = pm.events.rs,
                key-spec = "id",
                sort-spec = "first",
                alternate-row-background="#f0f0f0",
                automatic-columns? = false,
||--                {RecordGridColumn  width=24pt, "id"},
                {RecordGridColumn  width=144pt, "descr"},
                {RecordGridColumn  width=66pt, "first",
                    cell-spec = StandardDateCell,
                    format-spec = locale-date-format
                },
                {RecordGridColumn  width=66pt, "final",
                    cell-spec = StandardDateCell,
                    format-spec = locale-date-format
                },
                {RecordGridColumn  width=36pt, "who",
                    cell-spec = ForeignKeyCell
                },
                {RecordGridColumn  width=72pt, "repeat"}
            }
        {self.event-grid.add-command 
            {NewEventCommand pm, self.event-grid}
        }
        {self.event-grid.add-command
            {EditEventCommand pm, self.event-grid}
        }
        {self.add self.event-grid}
        {self.add-button-items clear? = true,
            {CommandButton
                height = 18pt,
                label = {lmessage Add...},
                tooltip = {hlmessage Add Calendar Entry},
                bound-command = 
                    {self.event-grid.get-command "new-event"} ||""
            },
            {CommandButton
                height = 18pt,
                label = {lmessage Edit...},
                tooltip = {hlmessage Edit Calendar Entry},
                bound-command = 
                    {self.event-grid.get-command "edit-event"} ||""
            },
            {CommandButton label="Delete", 
                bound-command = {self.event-grid.get-command "delete"}
            }
        }
     else
        {self.add
            {hlmessage There is no project model.}
        }
        {self.add-button-items clear? = true}
    }
  }

  {constructor public {default app:GanttDemoApp, ...}
    {construct-super app, {splice ...}}
  }
}

|| -------------------------------------------------------------------------

{def main-ui:GanttDemoApp = {GanttDemoApp}}
{value main-ui}

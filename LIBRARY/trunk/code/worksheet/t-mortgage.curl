||| Copyright 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.
|||
||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
||| ----------------------------------------------------------------------------

{curl 7.0 applet}

{applet manifest = "../manifest.mcurl", locale = "en"}

{import * from COM.CURL.EXT.WORKSHEET}
{import * from CURL.GUI.CHARTS}

{set-document-properties
    font-family = "Arial, Calibri, Cordia",
    font-size = 10pt
}

|| -------------------------------------------------------------------------

{title heading? = false, Mortgage Calculator}

{HBox
    border-color = "black", border-width = 1px,
    background = "orange",
    {TextField}, {DateField}
}


{def model = {WorksheetModel 40, 7}}

{def term-ref = {model.get-ref row = 2, col = 2}}
{def amount-ref = {model.get-ref row = 3, col = 2}}
{def rate-ref = {model.get-ref row = 4, col = 2}}
{def payment-ref = {model.get-ref row = 5, col = 2}}
||--{def total-paid-ref = {model.get-ref row = 6, col = 2}}

|| RecordSet containing computed values
{def rs =
    {RecordSet
        {RecordFields
            {RecordField "n",
                domain = int,
                modifiable? = false,
                index-type = RecordFieldIndexType.unique
            },
            {RecordField "interest", domain = WorksheetModel.currency-domain},
            {RecordField "principal", domain = WorksheetModel.currency-domain},
            {RecordField "balance", domain = WorksheetModel.currency-domain}
||--            {RecordField "interest", domain = double-domain},
||--            {RecordField "principal", domain = double-domain},
||--            {RecordField "balance", domain = double-domain}
        }
    }
}

|| Turn the RecordSet into a DataSource
{def rds = {RecordSetDataSource rs}}

|| If the term is changed, need to rebuild the recordset from scratch
{define-proc {rebuild-rs}:void
    {with rs.batch-events? = true do
        {rs.delete-all}
        {rs.commit}
        {for i = 1 to {term-ref.get-double} * 12 do
            {rs.append {RecordData n = i}}
        }
    }
}


|| ------------------
|| Computation procs
|| ------------------

|| M = P * (i*(1 + i)^n) / ((1 + i)^n - 1)
{def compute-payment =
    {proc {dest:DataRef, a-ref:DataRef, i-ref:DataRef, y-ref:DataRef}:void
        def amount = {a-ref.get-double}
        def ir = {i-ref.get-double}/(100.0 * 12)
        def n = {y-ref.get-double} * 12
        {dest.set-value
            amount * (ir * {pow (1.0 + ir), n})/({pow (1.0 + ir), n} - 1)
        }
    }
}

|| Balance remaining after m months
{def compute-balance =
    {proc {dest:DataRef, 
           a-ref:DataRef, i-ref:DataRef, y-ref:DataRef, m-ref:DataRef
          }:void
        def amount = {a-ref.get-double}
        def ir = {i-ref.get-double}/(100.0 * 12)
        def n = {y-ref.get-double} * 12
        def m = {m-ref.get-double}
        {dest.set-value
            (amount * ({pow (1.0 + ir), n} - {pow 1 + ir, m}))
            /
            ({pow (1.0 + ir), n} - 1)
        }
    }
}

|| proc to sum values provided (as range or some other aggregate)
{def compute-sum =
    {proc {dest:DataRef, src:DataRef}:void
        let sum:double = 0.0
        {for v in src do
            {inc sum, v}
        }
        {dest.set-value sum}
    }
}

|| proc to multiply all arguments
{def compute-product =
    {proc {dest:DataRef, ...:DataRef}:void
        let a:double = 1.0
        {for dr:DataRef in ... do
            set a = a * {dr.get-double}
        }
        {dest.set-value a}
    }
}

|| proc to subtract two arguments
{def compute-difference =
    {proc {dest:DataRef, p:DataRef, q:DataRef}:void
        {dest.set-value {p.get-double} - {q.get-double}}
    }
}

|| int-paid = tot-paid - principal-paid
{def compute-interest-paid =
    {proc {dest:DataRef, 
           n-ref:DataRef, payment-ref:DataRef, ppaid-ref:DataRef
          }:void
        def tot-paid = {n-ref.get-double} * {payment-ref.get-double}
        def ppaid = {ppaid-ref.get-double}
        {dest.set-value tot-paid - ppaid}
    }
}

|| -------------------------------------------------------------------------

{def worksheet =
    {Worksheet
        model,
        font-size = 9pt,
        {widths 0.25in, 1.0in, 1.0in, 1.0in, 1.0in, 0.25in},
        row = 0, col = 1,
        {cell-spec colspan = 2, {bold Mortgage Calculator}},
        col = 3, {cell-spec halign = "right", "Date"},
        {editable-cell {DateTime.date}},

        row = 2, col = 1,
        "Term", 
        row = 2, col = 2, {DropdownList 5, 10, 15, 30,
                              value = 30,
                              {on e:ValueFinished at ddl:DropdownList do
                                  {rebuild-rs}
                                  {term-ref.set-value ddl.value}
                              }
                          }, "(years)",

        row = 3, col = 1, "Amount Borrowed", 
        {currency-cell editable? = true, halign = "right", 100000},
        row = 4, col = 1, "Interest Rate", {editable-cell halign = "right",  4.0},
                          "(percent)",
        row = 5, col = 1, "Payment", 
        {formula-cell halign = "right", 
            domain = WorksheetModel.currency-domain,
            compute-payment, amount-ref, rate-ref, term-ref
        }, "(monthly)",

        row = 6, col = 1, "Total of all Payments",
        {formula-cell
            domain = WorksheetModel.currency-domain,
            halign = "right",
            compute-product,
            term-ref, payment-ref, {ValueRef 12.0}
        },

        row = 8, col = 1, "Month", "Interest", "Principal", "Balance",
        row = 9, col = 0, rowspan = 12, {text},
        row = 9, col = 1
        ,
        {cell-spec
            rowspan = 12, colspan = 5,
            {EmbeddedRecordGrid
                takes-focus? = true,
                width = 6in, 
                height = 2.3in,
                record-source = rs,
                region-selection-enabled? = true,
                automatic-columns? = false,
                {RecordGridColumn halign = "right", "n"},
                {RecordGridColumn halign = "right", "interest"},
                {RecordGridColumn halign = "right", "principal"},
                {RecordGridColumn halign = "right", "balance"}
            }
        }
        ,
        || Add a LayeredChart
        row = 22, col = 1,
        {cell-spec
            rowspan = 15,
            colspan = 6,
            vstretch? = true, hstretch? = true,
            {LayeredChart
                height = 3in,
                font-size = 8pt, font-family = "Tahoma",
                {LineLayer
                    {ChartDataSeries rs, "interest"},
                    {ChartDataSeries rs, "principal"},
                    {ChartDataSeries rs, "balance"},
                    legend-enabled? = true
                }
            }
        }
    }
}

|| Add the formulas and display the complete Worksheet
{value
    {def n-ref = {rds.get-ref "n"}}
    {def principal-ref = {rds.get-ref "principal"}}
    {def interest-ref = {rds.get-ref "interest"}}
    {def balance-ref = {rds.get-ref "balance"}}
    {rds.make-formula balance-ref, WorksheetModel.currency-domain, compute-balance,
        amount-ref, rate-ref, term-ref, n-ref
    }
    {rds.make-formula principal-ref, WorksheetModel.currency-domain, compute-difference, 
        amount-ref, balance-ref
    }
    {rds.make-formula interest-ref, WorksheetModel.double-domain, compute-interest-paid,
        n-ref, payment-ref, principal-ref
    }

    {after 0s do
        {rebuild-rs}
||--        {dump {model.get-data}}
    }
    worksheet || display the worksheet
}

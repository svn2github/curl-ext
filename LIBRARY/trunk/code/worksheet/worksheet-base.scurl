||| Copyright 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.
|||
||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
||| ----------------------------------------------------------------------------

||FIXME: move to EXT.DATA-ACCESS
{doc-next
    {purpose
        A 2-dimensional array that can be expanded and contracted by
        inserting or deleting rows and columns.
    }
}
{define-class public open {ResizableArray-of t:Type} {inherits {Array-2-of t}}

  {doc-next
    {purpose The number of rows currently in the array.}
  }
  {getter public open {rows}:int
    let (rows:int, cols:int) = {self.size}
    {return rows}
  }

  {doc-next
    {purpose The number of columns currently in the array.}
  }
  {getter public open {cols}:int
    let (rows:int, cols:int) = {self.size}
    {return cols}
  }


  {doc-next
    {purpose
        Construct a resizablea array initially containing {param rows} rows
        and {param cols} columns.
    }
    {parameter rows, the number of rows in the array}
    {parameter cols, the number of columns in the array}
    {parameter init-proc, if not null, each cell in the array
        is initialized by calling {ctext {init-proc r, c}}
        where {param r} and {param c} are the row and column index of
        the value being initialized.
    }
  }
  {constructor public {default
                          rows:int, cols:int,
                          init-proc:#{proc-type {r:int, c:int}:t} = null
                      }
    {construct-super rows, cols}
    {if-non-null init-proc then
        {for r = 0 below rows do
            {for c = 0 below cols do
                set self[r, c] = {init-proc r, c}
            }
        }
    }
  }

  {method public {clone}:{Array-2-of t}
    def c = {new {ResizableArray-of t}, self.rows, self.cols}
    {for ri = 0 below self.rows do
        {for ci = 0 below self.cols do
            set c[ri, ci] = self[ri, ci]
        }
    }
    {return c}
  }

||--  {method public {set-size s1:int, s0:int}:void
||--  }

  {doc-next
    {purpose
        Insert {param count} rows into the resizable array
        or (delete them if {param count} is negative).
    }
    {details
        If {param count} is positive, insert {param count} rows
        at {param first}, so that the values originally at first will
        be found at {code first + count}. If {param init-proc} is
        supplied, then each new value is initialized to the value it
        returns, where {param r} and {param c} are the row and column
        index of the value being initialized.

        If {param count} is negative, then the data starting at {param
        first} and including {param count} rows will be removed from
        the array, reducing the number of rows by {param count}.
    }
  }
  {method public {insert-rows
                     first:int,
                     count:int,
                     init-proc:#{proc-type {r:int, c:int}:t} = null
                 }:void

    || Check for cases that do nothing
    {if count == 0 || nothing to do
        or (count < 0 and first >= self.rows) || no rows above to delete
     then
        {return}
    }

    || Check for errors
    {if first > self.rows or first < 0 then
        {throw {ArrayBoundsException obj = self, 
                   {hlmessage Invalid row specified}
               }
        }
    }

    {if count < 0 then
        || move, then delete
        def tbdel = {min -count, self.rows - first}
        def move-count = self.rows - first - tbdel - 1
        let last:int = self.rows - tbdel - 1
        {for ri = first to last do
            {for ci = 0 below self.cols do
                set self[ri, ci] = self[ri + tbdel, ci]
            }
        }
        {self.set-size self.rows - tbdel, self.cols}
     else
        || add space, copy old to new, reset old
        let last:int = self.rows - 1 + count
        {self.set-size self.rows + count, self.cols}
        {for ri = last downto first + count do
            {for ci = 0 below self.cols do
                set self[ri, ci] = self[ri - count, ci]
            }
        }
        {for ri = 0 below count do
            {for ci = 0 below self.cols do
                set self[first + ri, ci] =
                    {if-non-null init-proc then
                        {init-proc first + ri, ci}
                     else
                        {uninitialized-value-for-type t}
                    }
            }
        }
    }
  }

  {doc-next
    {purpose
        Insert {param count} columns into the resizable array
        or (delete them if {param count} is negative).
    }
    {details
        If {param count} is positive, insert {param count} columns
        at {param first}, so that the values originally at first will
        be found at {code first + count}. If {param init-proc} is
        supplied, then each new value is initialized to the value it
        returns, where {param r} and {param c} are the row and column
        index of the value being initialized.

        If {param count} is negative, then the data starting at {param
        first} and including {param count} columns will be removed from
        the array, reducing the number of columns by {param count}.
    }
  }
  {method public {insert-cols
                     first:int,
                     count:int,
                     init-proc:#{proc-type {r:int, c:int}:t} = null
                 }:void

    || Check for cases that do nothing
    {if count == 0 || nothing to do
        or (count < 0 and first >= self.cols) || no cols above to delete
     then
        {return}
    }

    || Check for errors
    {if first > self.cols or first < 0 then
        {throw {ArrayBoundsException obj = self, 
                   {hlmessage Invalid column specified}
               }
        }
    }

    {if count < 0 then
        || move, then delete
        def tbdel = {min -count, self.cols - first}
        def move-count = self.cols - first - tbdel - 1
        let last:int = self.cols - tbdel - 1
        {for ci = first to last do
            {for ri = 0 below self.rows do
                set self[ri, ci] = self[ri, ci + tbdel]
            }
        }
        {self.set-size self.rows, self.cols - tbdel}
     else
        || add space, copy old to new, reset old
        let last:int = self.cols - 1 + count
        {self.set-size self.rows, self.cols + count}
        {for ci = last downto first + count do
            {for ri = 0 below self.rows do
                set self[ri, ci] = self[ri, ci - count]
            }
        }
        {for ci = 0 below count do
            {for ri = 0 below self.rows do
                set self[ri, first + ci] =
                    {if-non-null init-proc then
                        {init-proc ri, first + ci}
                     else
                        {uninitialized-value-for-type t}
                    }
            }
        }
    }
  }
}

|| -----------------------------------------------------------------------------

||FIXME: move to EXT.DATA-ACCESS
{doc-next
    {purpose
        Define a protocol for refreshing the state of an object once,
        after one or perhaps many requests to update.
    }
    {details
        This interface is used to decouple the recognition that an
        update is needed from the code that performs the update.  It
        is usually used where changes are noted during an event
        handler but the processing of those changes is best delayed
        until the current event is finished.

        An object implements this interface by overriding the
        {docref RefreshMixin.refresh} method to do the work of updating
        the object.

        The user of a subclass of this class can then
        call {docref-abbr RefreshMixin.update} to request that the
        object be refreshed.  Once the current event is finished,
        the {ctext refresh} method will be called to perform any
        necessary computations.
    }
}
{define-class abstract public open RefreshMixin

  {doc-next
    {purpose
        Counter incremented each time {docref RefreshMixin.refresh}
        is called.
    }
  }
  field public-get protected-set refresh-count:int

  {doc-next
    {purpose
        Indicates that a refresh should be performed once the applet
        returns to the event loop.
    }
  }
  field protected _refresh-requested?:bool = false

  {doc-next
    {purpose
        Initialize a new {docref RefreshMixin}.
    }
  }
  {constructor public {default}
  }

  {doc-next
    {purpose
        Request a refresh, usually after all updates are requested.
    }
    {details 
        The method {docref RefreshMixin.refresh} will be called once,
        after the current event has been handled,
    }
  }
  {method public open {update}:void
    {if not self._refresh-requested? then
        {inc self.refresh-count}
        set self._refresh-requested? = true
        {after 0.0s do
            || Be sure refresh-requested? is true during the refresh
            set self._refresh-requested? = true
            {self.refresh}
            set self._refresh-requested? = false
        }
    }
  }

  {doc-next
    {purpose
        Override this method to do actual work
    }
    {details
        Code should call {docref RefreshMixin.update} when an update
        is needed. The system will call this method the next time
        the applet returns to the event loop.
    }
  }
  {method abstract public open {refresh}:void
  }
}

|| -----------------------------------------------------------------------------

||--{doc-next
||--    {purpose Map from String to any.}
||--}
||--{def public Dictionary = {HashTable-of String, any}}


|| Proc type used to represent a formula
|| Return a new value for target
{doc-next
    {purpose
        A procedure used to compute a value in a {docref DataSource}
    }
    {details
        The arguments to a calculation procedure must all be {docref
        DataRef}s.  The first argument is the output value. A
        correctly written procedure will store a computed value there,
        and nowhere else.

        Additional arguments are {docref DataRef}s for the inputs to
        the procedure.
    }
}
{def public CalcProc = any}
||--{def CalcProcN =
||--    {proc-type {target:DataRef, ...:DataRef}:void}
||--}
||--{def CalcProc1 =
||--    {proc-type {target:DataRef, a:DataRef}:any}
||--}
||--{def CalcProc2 =
||--    {proc-type {target:DataRef, a:DataRef, b:DataRef}:any}
||--}
||--{def CalcProc3 =
||--    {proc-type {target:DataRef, a:DataRef, b:DataRef, c:DataRef}:any}
||--}
||--{def CalcProc4 =
||--    {proc-type {target:DataRef,
||--                a:DataRef, b:DataRef, c:DataRef, d:DataRef
||--               }:any
||--    }
||--}
||--{def CalcProc5 =
||--    {proc-type {target:DataRef,
||--                a:DataRef, b:DataRef, c:DataRef, d:DataRef, e:DataRef
||--               }:any
||--    }
||--}

{doc-next
    {purpose
        Convert any type of value into a number. If it is a string,
        attempt to parse it as a number. If conversion fails, return 0.0.
    }
}
{define-proc public {any-to-double v:any}:double
    {return
        {type-switch v
         case s:String do
            {s.to-double}
         else
            {if {number? v} then
                v asa double
             else
                0.0
            }
        }
    }
}


{doc-next
    {purpose
        An abstract container, with values that are accessed using a
        subclass of {docref DataRef}. It notifies observers when a value
        is changed.
    }
}
{define-class abstract public open DataSource {inherits Observer, Observable}

  let private constant np:NumberParser =
      {NumberParser
        allow-grouping? = true,
        allow-exponent? = false,
        whitespace-char-class = {CharClass " $,\t"}
      }


  {doc-next
    {purpose Given a value, choose the a domain to use for it.}
    {details
        If the value is a string, an attempt is made to parse it
        as a number, a date, or a {docref DateTime} in order to find the
        best domain to use.
    }
  }
  {define-proc public {get-default-domain v:any}:Domain
    let domain:Domain = DataSource.any-domain
    {if {number? v} then
        set domain = DataSource.double-domain
     else
        {type-switch v
||--         case i:int do
||--            set domain = DataSource.int-domain
         case dt:DateTime do
            set domain = 
                {if dt.zone == DateTimeZone.utc
                    and dt.info.hour == 0
                    and dt.info.minute == 0
                    and dt.info.second == 0
                    and dt.info.partial-second == 0
                 then
                    DataSource.date-domain
                 else
                    DateTime asa Domain
                }
         case s:StringInterface do
            set domain = DataSource.string-domain
            let num?:bool = false
            {try
                def s = v asa String
                def (ret, end, underflow?, overflow?) =
                    {DataSource.np.parse-double s}
                {if end == s.size then
                    set domain = DataSource.double-domain
                    set num? = true
                }
             catch e:Exception do
                || Ignored - no change to domain
            }
            {if not num? and s != "" then
                {try
                    def dt = {DateTime v}
                    {if dt.info.hour == 0
                        and dt.info.minute == 0
                        and dt.info.second == 0
                     then
                        set domain = DataSource.date-domain
                     else
                        set domain = DateTime asa Domain
                    }
                 catch e:Exception do
                    || Ignored - no change to domain
                }
            }
         case b:bool do
            set domain = bool asa Domain
         case t:Time do
            set domain = Time asa Domain
        }
    }
    {return domain}
  }

  {doc-next
    {purpose
        A constant {docref Domain} object for values of any type.
    }
  }
  def public any-domain:Domain = {StandardAnyDomain}

  {doc-next
    {purpose
        A constant {docref Domain} object for values of {ctext int} type.
    }
  }
  def public int-domain:Domain = {StandardIntDomain}

  {doc-next
    {purpose
        A constant {docref Domain} object for values of type {ctext double}.
        Values will be formatted with 3 digits after the decimal point.
    }
  }
  def public double-domain:Domain = d3-domain

  {doc-next
    {purpose
        A constant {docref Domain} object for values that represent
        an amount of currency (see {docref CurrencyDomain}).
    }

  }
  def public currency-domain:Domain = {CurrencyDomain}

  {doc-next
    {purpose
        A constant {docref Domain} object for values that are calendar dates.
    }
  }
  def public date-domain:Domain =
      {LocaleDateDomain default-value = {DateTime.date}}

  {doc-next
    {purpose
        A constant {docref Domain} object for values of {docref String} type.
    }
  }
  def public string-domain:Domain = {StandardStringDomain}

  {doc-next
    {purpose An empty iterator instance to be used as needed.}
  }
  def public empty-iterator:EmptyIterator = {EmptyIterator}

  {doc-next
    {purpose
        Return a reference to some element within this DataSource.
    }
  }
  {method abstract public open {get-ref
                                   ...
                               }:DataRef
  }
}


{doc-next
    {purpose
        A reference into some {docref DataSource}.
    }
    {details
        A {ctext DataRef} is usually obtained by calling
        {docref DataSource.get-ref}.
    }
}
{define-class abstract public open DataRef

  {doc-next
    {purpose
        The object that contains the data denoted by this {docref DataRef}.
    }
  }
  field public-get protected-set source:DataSource

  {doc-next
    {purpose
        Initialize a new {docref DataRef}.
    }
    {parameter source, Provides the value for the {docref-abbr DataRef.source}
        property.
    }
  }
  {constructor public {default source:DataSource}
    set self.source = source
  }

  {doc-next
    {purpose
        Combine self with {param target} and return a {docref DataRef}
        that a formula can use. May return self or a new DataRef.
    }
  }
  {method abstract public open {resolve target:DataRef}:DataRef
  }

  {doc-next
    {purpose
        Get the value that this reference points to.
    }
  }
  {getter abstract public open {value}:any
  }

  {doc-next
    {purpose
        Get the {docref Domain} for values produced by theis {docref DataRef}.
    }
  }
  {getter public open {domain}:Domain
    {return {DataSource.get-default-domain self.value}}
  }

  {doc-next
    {purpose Update the value that is the target of this reference.}
  }
  {setter abstract public open {value val:any}:void
  }

  {doc-next
    {purpose Get the value that this reference points to as a String.}
  }
  {getter abstract public open {as-String}:String
  }

  {doc-next
    {purpose
        Get the value that this reference points to asa double.
    }
  }
  {getter abstract public open {as-double}:double
  }

  {doc-next
    {purpose Return true if this object references several values.}
  }
  {getter abstract public open {composite?}:bool
  }

  {doc-next
    {purpose
        If this is a composite reference, return an iterator for all of
        the values. Otherwise return an iterator for the single value.
    }
  }
  {method public open {to-Iterator}:{Iterator-of DataRef}
    {return {SingleIterator self}}
  }
}

{doc-next
    {purpose
        An implementation of the {docref DataSource} protocol for
        literal values.
    }
    {details
        The methods of this class do nothing, but they are required
        so that the interface can be satisfied.
    }
}
{define-class public open ValueDataSource {inherits DataSource}

  {doc-next
    {purpose
        Return a {docref ValueRef} constructed from the value
        passed in the rest args.
    }
    {details
        This override of {docref DataSource.get-ref} takes one
        positional argument {param value} and one optional keyword
        argument, {param domain}. These are simply passed directly
        to the {docref ValueRef.default} constructor.
    }
  }
  {method public open {get-ref
                          ...
                      }:DataRef
    {return {ValueRef {splice ...}}}
  }
}

{doc-next
    {purpose
        A singleton {docref ValueDataSource} that may be used for
        all {docref ValueRef}s.
    }
}
{def public value-source = {ValueDataSource}}

{doc-next
    {purpose
        Represents a literal value that can be passed to a {docref Worksheet}
        formula.
    }
}
{define-class public open ValueRef {inherits DataRef}

  {doc-next
    {purpose The literal value that this object represents.}
  }
  field protected _value:any
  
  {doc-next
    {purpose The {docref Domain} associated with this value, if any.}
  }
  field protected _domain:#Domain = null

  {constructor public {default
                          value:any,
                          domain:#Domain = null
                      }
    {construct-super value-source}
    set self._value = value
    set self._domain = domain
  }

  {method public open {init
                          value:any,
                          domain:#Domain = null
                      }:void
    set self._value = value
    set self._domain = domain
  }

  {method public open {resolve target:DataRef}:DataRef
    {return self}
  }

  {getter public open {value}:any
    {return self._value}
  }

  {setter public open {value val:any}:void
    ||FIXME: notify observers
    set self._value = val
  }

  {getter public open {domain}:Domain
    {if-non-null d = self._domain then
        {return d}
     else
        {return super.domain}
    }
  }

  || Get the value that this reference points to as a String
  {getter public open {as-String}:String
    {type-switch self.value
     case s:String do
        {return s}
     else
        {if-non-null self._domain then
            {return {self.domain.format self.value}}
         else
            {return {String self.value}}
        }
    }
  }

  || Get the value that this reference points to asa double
  {getter public open {as-double}:double
    {return {any-to-double self.value}}
  }

  || Return true if this object references several values
  {getter public open {composite?}:bool
    {return false}
  }

  || If this is a composite reference, return an iterator for all of
  || the values.
  {method public open {to-Iterator}:{Iterator-of DataRef}
    {return {SingleIterator self}}
  }
}


{doc-next
    {purpose
        Iterator returned when there is no value available. It always
        reports that there are no more values.
    }
}
{define-class public final EmptyIterator {inherits {Iterator-of DataRef}}

  {doc-next
    {purpose Initialize this object.}
  }
  {constructor public {default}
    {self.reset}
  }

  {method public {reset}:void
  }
  
  {method public {read-one}:(v:DataRef, eof?:bool)
    {return ({uninitialized-value-for-type DataRef}, true)}
  }
}


{doc-next
    {purpose Iterator for a single value {docref DataRef}.}
}
{define-class public final SingleIterator {inherits {Iterator-of DataRef}}

  field private ref:DataRef
  field private done?:bool

  {doc-next
    {purpose Initialize this object.}
    {parameter ref, The value to be returned by the iterator.}
  }
  {constructor public {default
                          ref:DataRef
                      }
    set self.ref = ref
    {self.reset}
  }

  {method public {reset}:void
    set self.done? = false
  }
  
  {method public {read-one}:(v:DataRef, eof?:bool)

    {if self.done? then
        {return ({uninitialized-value-for-type DataRef}, true)}
    }

    set self.done? = true
    {return (self.ref, false)}
  }
}


{define-proc package {bad-ref s:String}:void
    {error {hlformat "Unrecognized DataRef: %s", s}}
}


{doc-next
    {purpose A reference temporarily represented by a string.}
}
||FIXME: change name to LazyRef or DelayedRef or TempRef?
{define-class public open StringRef {inherits ValueRef}
  {constructor public {default ref:String}
    {construct-super ref}
  }

  {method public open {resolve target:DataRef}:DataRef
    {return {{target.source.get-ref self.value}.resolve target}}
  }

}

{doc-next
    {purpose
        A mixin used to maintain the current value as a
        {docref DataRef} for various iterator classes.
    }
}
{define-class public open DataRefIteratorMixin

  {doc-next
    {purpose The current value, as a {docref ValueRef}.}
  }
  field protected _value-ref:#ValueRef

  {doc-next
    {purpose Initialize the object.}
  }
  {constructor public {default
                      }
  }

  {doc-next
    {purpose Set the value and domain.}
  }
  {method public open {set-ref v:any, domain:#Domain}:void
    {if-non-null ref = self._value-ref then
        {ref.init v, domain = domain}
     else
        set self._value-ref = {ValueRef v, domain = domain}
    }
  }

  {doc-next
    {purpose Return the current value as a {docref ValueRef}.}
  }
  {getter public open {value-ref}:ValueRef
    {return {non-null self._value-ref}}
  }
}


|| -----------------------------------------------------------------------------

{doc-next
    {purpose
        Structure to hold the information required to invoke a calculation
        in a {docref Worksheet}.
    }
}
{define-class public final Formula

  {doc-next
    {purpose
        A formula procedure that copies the value at {param src} to {param dest}.
    }
  }
  def public copy =
      {proc {dest:DataRef, src:DataRef}:void
        set dest.value = src.value
      }

  {doc-next
    {purpose
        A formula procedure that adds two inputs {param a} and {param b} to
        compute the result stored at {param dest}.
    }
  }
  def public add =
      {proc {dest:DataRef, a:DataRef, b:DataRef}:void
        set dest.value = a.as-double + b.as-double
      }

  {doc-next
    {purpose
        A formula procedure that subtracts input {param a} from {param a} to
        compute the result stored at {param dest}.
    }
  }
  def public subtract =
      {proc {dest:DataRef, a:DataRef, b:DataRef}:void
        set dest.value  = a.as-double - b.as-double
      }

  {doc-next
    {purpose
        A formula procedure that multiplies two inputs {param a} and {param b} to
        compute the result stored at {param dest}.
    }
  }
  def public multiply =
      {proc {dest:DataRef, a:DataRef, b:DataRef}:void
        set dest.value = a.as-double * b.as-double
      }

  {doc-next
    {purpose
        A formula procedure that divides input {param a} by {param b} to
        compute the result stored at {param dest}.
    }
  }
  def public divide =
      {proc {dest:DataRef, a:DataRef, b:DataRef}:void
        set dest.value = a.as-double / b.as-double
      }

  {doc-next
    {purpose
        A formula procedure that takes any number of input data references,
        adds them up, and stores the result at {param dest}.
    }
    {details
        If any of the inputs are composite values, this procedure will iterate
        over all of them while accumulating the total.
    }
  }
  def public sum =
      {proc {dest:DataRef, ...:DataRef}:void
        let x:double = 0.0
        {for v in ... do
            {if v.composite? then
                {for y in v do
                    set x = x + y.as-double
                }
             else
                set x = x + v.as-double
            }
        }
        set dest.value = x
      }

  {doc-next
    {purpose
        A formula procedure that takes any number of input data
        references, multiplies them together, and stores the result
        at {param dest}.
    }
    {details
        If any of the inputs are composite values, this procedure will iterate
        over all of them while computing the result.
    }
  }
  def public product =
      {proc {dest:DataRef, ...:DataRef}:void
        let x:double = 1.0
        {for v in ... do
            {if v.composite? then
                {for y in v do
                    set x = x * y.as-double
                    {if x == 0.0 then
                        {break}
                    }
                }
             else
                set x = x * v.as-double
                {if x == 0.0 then
                    {break}
                }
            }
        }
        set dest.value = x
      }

  {doc-next
    {purpose
        A formula procedure that takes any number of input data
        references, concatenates their string representation, and
        stores the result at {param dest}.
    }
    {details
        If any of the inputs are composite values, this procedure will iterate
        over all of them while computing the result.
    }
  }
  def public concat =
      {proc {dest:DataRef, ...:DataRef}:void
        def buf = {StringBuf}
        {for v in ... do
            {if v.composite? then
                {for y in v do
                    {buf.concat y.as-String}
                }
             else
                {buf.concat v.as-String}
            }
        }
        set dest.value = {buf.to-String}
      }


  {doc-next
    {purpose
        A formula procedure that takes any number of input data
        references and counts them.
    }
    {details
        If any of the inputs are composite values, this procedure will iterate
        over all of them while computing the result.
    }
  }
  def public count =
      {proc {dest:DataRef, ...:DataRef}:void
        let x:double = 0.0
        {for v in ... do
            {if v.composite? then
                {for y in v do
                    {inc x}
                }
             else
                {inc x}
            }
        }
        set dest.value = x
      }

||--  def public hyperlink =
||--      {proc {dest:DataRef, href:DataRef, text:DataRef}:void
||--        {dest.set-value
||--            {link target = "_blank", href = {url {href.get-String}},
||--                {text.get-value}
||--            }
||--        }
||--      }


  {doc-next
    {purpose The location where the result is stored.}
  }
  field public constant target:DataRef

  {doc-next
    {purpose The domain of the result.}
  }
  field public constant domain:Domain

  {doc-next
    {purpose The procedure that defines the computation for this formula.}
  }
  field public constant formula:CalcProc

  {doc-next
    {purpose The input arguments for this formula.}
  }
  field public constant args:{Array-of DataRef}

  {doc-next
    {purpose Initialize this {docref Formula}.}
    {details
        Applications code should not normally create a {docref
        Formula} object. Instead, call {docref-abbr
        CalcMixin.make-formula}, which will both create a formula and
        ensure that it is called when it is necessary to recompute the
        result.
    }
    {parameter target, A reference to the location where the result will be
        stored.
    }
    {parameter domain, The domain of the result.}
    {parameter formula, The procedure that defines the computation of this formula.}
    {parameter ..., The inputs to the forumula computation.}
  }
  {constructor public {default
                          target:DataRef,
                          domain:Domain,
                          formula:CalcProc,
                          ...:DataRef
                      }
    set self.target = target
    set self.domain = domain
    set self.formula = formula
    set self.args = {new {Array-of DataRef}, {splice ...}}
  }
}

|| Note: This is always mixed into DataSource, but not every DataSource
|| supports this interface.
{doc-next
    {purpose Adds support for formulas to a {docref DataSource}.}
}
{define-class abstract public open CalcMixin {inherits RefreshMixin}

  {doc-next
    {purpose
        A list of {docref Formula}s in the order in which they
        should be evaluated.
    }
  }
  field ordered-calcs:{Array-of Formula}

  {doc-next
    {purpose Initialize this object.}
  }
  {constructor public {default}
    {construct-super}
    set self.ordered-calcs = {new {Array-of Formula}}
  }

  {doc-next
    {purpose Create a {docref Formula} and store it for future use.}
    {parameter target, A reference to the location where the result will be
        stored.
    }
    {parameter domain, The domain of the result.}
    {parameter formula, The procedure that defines the computation of this formula.}
    {parameter ..., The inputs to the forumula computation.}
  }
  {method public open {make-formula
                          target:DataRef,
                          domain:Domain,
                          formula:CalcProc,
                          ...:DataRef
                      }:Formula
    def f = {Formula target, domain, formula, {splice ...}}
    {with-compiler-directives allow-any-calls? = true do
        {for arg in f.args do
            {if arg.source != self then
                {(self asa Observer).observe arg.source}
            }
        }
    }
    {self.ordered-calcs.append f}
    {return f}
  }

  {doc-next
    {purpose
        Evaluate {param formula} and store the result in {param target}.
        The rest args are inputs to the formula.
    }
    {details
        The rest args are resolved with respect to the target (via
        {ctext {{param arg}.resolve target}}) and the formula procedure
        is invoked with {param target} as the first argument and the
        resolved input arguments as the remaining arguments. It is
        assumed that the formula procedure will assign a value to
        the target.
    }
  }
  {method public open {eval
                          formula:CalcProc,
                          target:DataRef,
                          ...:DataRef
                      }:void
    def args = {new {Array-of DataRef}}
    {for dr in ... do
        {args.append {dr.resolve target}}
    }

    {with-compiler-directives allow-any-calls? = true do
        {formula target, {splice args}}
    }
  }

||--  {method abstract public open {recalc}:void
||--  }

}

|| -----------------------------------------------------------------------------

{doc-next
    {purpose
        Used with {docref validate-with} to ensure that an entry is
        valid according to the associated {docref Domain}.
    }
}
{define-class public open WorksheetDomainValidator {inherits Validator}
  
  {doc-next
    {purpose The {docref Domain} used to validate values.}
  }
  field public-get protected-set domain:Domain

  {doc-next
    {purpose Construct a {docref DomainValidator}.
    }
    {details
        Use this class with {docref validate-with} to check that an
        entry is valid for the domain.
    }
  }
  {constructor public {default
                          domain:Domain
                      }
    {construct-super}
    set self.domain = domain
  }
  
  {method public open {validate-value
                          controller:ValidationController, 
                          target:ValueControl, 
                          partial?:bool
                      }:#Visual
    let v:any = target.value-as-any
    let msg:Visual = 
        {if-non-null m = controller.message then
            m
         else
            {hlmessage Invalid entry.} asa Visual
        }
    {type-switch v
     case sv:StringInterface do
        let tv:String = {sv.trim-clone}
        {if tv.size > 0 then
            {try
                let v:any = {self.domain.parse tv}
                {return null}
             catch e:Exception do
                set msg = e.message asa Visual
            }
         else
            || Input is only spaces
            {if controller.required? then
                {target.mark-invalid missing? = true}
                {if not partial? then
                    {return controller.missing-entry-message}
                }
             else
                {return null}
            }
        }
     else
        {if v == null or {self.domain.validate v} == null then
            {return null}
        }
    }
    {return msg}
  }

}

|| -----------------------------------------------------------------------------

{define-enum package FrameBorderOrientation 
    none,
    left,
    right,
    top,
    bottom,
    bottom-right,
    top-right,
    bottom-left,
    top-left
}

{define-class package final ResizeableDecorationlessView {inherits Frame}
  field private cached-border-width:Distance = 0m
  field private drag-started?:bool
  field private drag-pos-x:Distance = -1m
  field private drag-pos-y:Distance = -1m
  field private pointer-pressed?:bool = false
  field private view:View
  field private border-orientation:FrameBorderOrientation = 
      FrameBorderOrientation.none
  field package-get private-set minimum-width:Distance 
  field package-get private-set minimum-height:Distance

  {constructor package {default
                           view:View,
                           minimum-width:Distance = 2cm,
                           minimum-height:Distance = 1cm,
                           ...
                       }
    set self.minimum-width = minimum-width
    set self.minimum-height = minimum-height
    set self.view = view
    
    {construct-super ...}
  }

  {local-option public border-width:any
    set self.cached-border-width =  {any-to-Distance border-width}
  }
  
  {method public {on-drag-started e:DragStarted}:void
    {if e.state-mask.button-1? and self.pointer-pressed? then
        set self.drag-started? = true
        set (self.drag-pos-x, self.drag-pos-y) =
            {self.transform-to-display-coordinates e.x, e.y}
                        
        {e.consume}
    }

    {super.on-drag-started e}
  }

  {method public {on-pointer-motion e:PointerMotion}:void
    {if self.drag-started? then
        {self.resize-view-window e}
     else
        {if not self.pointer-pressed? then
            {self.set-orientation e}
        }
    }

    {e.consume}
    {super.on-pointer-motion e}
  }

  {method public {on-pointer-press e:PointerPress}:void
    {if e.button == left-button then
        {if-non-null child-layout = self.child then
            {if {child-layout.bounds-valid?} then
                let bounds:GRect = {child-layout.get-bounds}
                
                {if not {bounds.within? e.x, e.y} then                    
                    set self.pointer-pressed? = true
                    {e.continue-implicit-pointer-grab self}
                    {e.consume}
                }
            }
        }
    }
    {super.on-pointer-press e}
  }

  {method public {on-pointer-release e:PointerRelease}:void
    {if-non-null child-layout = self.child then
        {if {child-layout.bounds-valid?} then
            let bounds:GRect = {child-layout.get-bounds}
            
            {if not {bounds.within? e.x, e.y} then                    
                {e.consume}
            }
        }
    }
  
    {if e.button == left-button then
        set self.pointer-pressed? = false
        {if self.drag-started? then
            set self.drag-started? = false
            {e.consume}
        }
    }

    {super.on-pointer-release e}
  }

  {method public {on-grab-release e:GrabRelease}:void
    set self.pointer-pressed? = false
    {if self.drag-started? then
        set self.drag-started? = false
        {e.consume}
    }

    {super.on-grab-release e}
  }

  {method private {resize-view-window e:PointerMotion}:void
    let view:View = self.view
    let (new-drag-pos-x:Distance, new-drag-pos-y:Distance) =
        {self.transform-to-display-coordinates e.x, e.y}
    let dc:DisplayContext = {self.get-display-context}
    let device-pixel-size:Distance = dc.device-pixel-size
    let (view-pos-x:Distance, view-pos-y:Distance,
         view-width:Distance, view-height:Distance) = 
             {view.get-window-position-and-size}
    
    {switch self.border-orientation
     case FrameBorderOrientation.left do
        let diff:Distance = new-drag-pos-x - self.drag-pos-x
        {if diff < device-pixel-size or diff > device-pixel-size then
            {if view-width - diff <= self.minimum-width then
                {return}
            }

            set self.drag-pos-x = new-drag-pos-x
            {view.set-window-position-and-size
                view-pos-x + diff, view-pos-y,
                view-width - diff, view-height
            }
        }
     case FrameBorderOrientation.right do
        let diff:Distance = new-drag-pos-x - self.drag-pos-x
        {if diff < device-pixel-size or diff > device-pixel-size then
            {if view-width + diff <= self.minimum-width then
                {return}
            }

            set self.drag-pos-x = new-drag-pos-x
            
            {view.set-window-size view-width + diff, view-height} 
        }
        
     case FrameBorderOrientation.top do
        let diff:Distance = new-drag-pos-y - self.drag-pos-y
        {if diff < device-pixel-size or diff > device-pixel-size then
            {if view-height - diff <= self.minimum-height then
                {return}
            }

            set self.drag-pos-y = new-drag-pos-y

            {view.set-window-position-and-size 
                view-pos-x, view-pos-y + diff,
                view-width, view-height - diff
            }
        }
        
     case FrameBorderOrientation.bottom do
        let diff:Distance = new-drag-pos-y - self.drag-pos-y
        {if diff < device-pixel-size or diff > device-pixel-size then
            {if view-height + diff <= self.minimum-height then
                {return}
            }

            set self.drag-pos-y = new-drag-pos-y

            {view.set-window-size view-width, view-height + diff} 
        }

     case FrameBorderOrientation.bottom-right do
        let diff-x:Distance = new-drag-pos-x - self.drag-pos-x
        {if diff-x < device-pixel-size or diff-x > device-pixel-size then
            {if view-width + diff-x <= self.minimum-width then
                set diff-x = 0m
             else
                set self.drag-pos-x = new-drag-pos-x
            }
        }

        let diff-y:Distance = new-drag-pos-y - self.drag-pos-y
        {if diff-y < device-pixel-size or diff-y > device-pixel-size then
            {if view-height + diff-y <= self.minimum-height then
                set diff-y = 0m
             else
                set self.drag-pos-y = new-drag-pos-y
            }
        }
        {if diff-x != 0m or diff-y != 0m then
            {view.set-window-size
                view-width + diff-x, view-height + diff-y
            }
        }
        
     case FrameBorderOrientation.top-right do
        let diff-x:Distance = new-drag-pos-x - self.drag-pos-x
        {if diff-x < device-pixel-size or diff-x > device-pixel-size then
            {if view-width + diff-x <= self.minimum-width then
                set diff-x = 0m
             else
                set self.drag-pos-x = new-drag-pos-x
            }
        }
            
        let diff-y:Distance = new-drag-pos-y - self.drag-pos-y
        {if diff-y < device-pixel-size or diff-y > device-pixel-size then
            {if view-height - diff-y <= self.minimum-height then
                set diff-y = 0m
             else
                set self.drag-pos-y = new-drag-pos-y
            }
        }

        {if diff-x != 0m or diff-y != 0m then
            {view.set-window-position-and-size
                view-pos-x, view-pos-y + diff-y,
                view-width + diff-x, view-height - diff-y
            }
        }
        
     case FrameBorderOrientation.bottom-left do
        let diff-x:Distance = new-drag-pos-x - self.drag-pos-x
        {if diff-x < device-pixel-size or diff-x > device-pixel-size then
            {if view-width - diff-x <= self.minimum-width then
                set diff-x = 0m
             else
                set self.drag-pos-x = new-drag-pos-x
            }
        }

        let diff-y:Distance = new-drag-pos-y - self.drag-pos-y
        {if diff-y < device-pixel-size or diff-y > device-pixel-size then
            {if view-height + diff-y <= self.minimum-height then
                set diff-y = 0m
             else
                set self.drag-pos-y = new-drag-pos-y
            }
        }

        {if diff-x != 0m or diff-y != 0m then
            {view.set-window-position-and-size
                view-pos-x + diff-x, view-pos-y,
                view-width - diff-x, view-height + diff-y
            }
        }

     case FrameBorderOrientation.top-left do
        let diff-x:Distance = new-drag-pos-x - self.drag-pos-x
        {if diff-x < device-pixel-size or diff-x > device-pixel-size then
            {if view-width - diff-x <= self.minimum-width then
                set diff-x = 0m
             else
                set self.drag-pos-x = new-drag-pos-x
            }
        }

        let diff-y:Distance = new-drag-pos-y - self.drag-pos-y
        {if diff-y < device-pixel-size or diff-y > device-pixel-size then
            {if view-height - diff-y <= self.minimum-height then
                set diff-y = 0m
             else
                set self.drag-pos-y = new-drag-pos-y
            }
        }

        {if diff-x != 0m or diff-y != 0m then
            {view.set-window-position-and-size 
                view-pos-x + diff-x, view-pos-y + diff-y,
                view-width - diff-x, view-height - diff-y
            }
        }
    }
  }

  {method private {set-orientation e:PointerMotion}:void
    {assert self.layout != null}

    {if not {self.layout.bounds-valid?} then
        {return}
    }

    let bounds:GRect = {self.get-bounds}
    let lextent:Distance = bounds.lextent
    let rextent:Distance = bounds.rextent
    let ascent:Distance = bounds.ascent
    let descent:Distance = bounds.descent
    let x:Distance = e.x
    let y:Distance = e.y
    let cached-border-width:Distance = self.cached-border-width

    let left?:bool = (lextent >= x) and (x >= lextent - cached-border-width)
    let right?:bool = (x >= rextent) and (x >= rextent - cached-border-width)
    let top?:bool = (ascent >= y) and (y >= ascent - cached-border-width)
    let bottom?:bool = (y >= descent) and (y >= descent - cached-border-width)
    let corner-threshold:Distance = cached-border-width * 4
    {if left? or right? then
        {if y >= ascent and y <= ascent + corner-threshold then
            set top? = true
         elseif y <= descent and y >= descent - corner-threshold then
            set bottom? = true
        }
     elseif top? or bottom? then
        {if x >= lextent and x <= lextent + corner-threshold then
            set left? = true
         elseif x <= rextent and x >= rextent - corner-threshold then
            set right? = true
        }
    }
    let border-orientation:FrameBorderOrientation =
        {if top? and left? then
            FrameBorderOrientation.top-left
         elseif top? and right? then
            FrameBorderOrientation.top-right
         elseif bottom? and left? then
            FrameBorderOrientation.bottom-left
         elseif bottom? and right? then
            FrameBorderOrientation.bottom-right
         elseif left? then
            FrameBorderOrientation.left
         elseif top? then
            FrameBorderOrientation.top
         elseif right? then
            FrameBorderOrientation.right
         elseif bottom? then
            FrameBorderOrientation.bottom
         else
            FrameBorderOrientation.none
        }
    {if self.border-orientation != border-orientation then
        set self.border-orientation = border-orientation
        {self.show-appropriate-cursor border-orientation}
    }
  }

  {method private {show-appropriate-cursor 
                      border-orientation:FrameBorderOrientation
                  }:void
    set self.cursor =
        {switch border-orientation
         case FrameBorderOrientation.none do
            cursor-arrow
         case 
            FrameBorderOrientation.left,
            FrameBorderOrientation.right 
         do
            cursor-size-left-right
         case 
            FrameBorderOrientation.top,
            FrameBorderOrientation.bottom 
         do
            cursor-size-top-bottom
         case FrameBorderOrientation.bottom-right do
            cursor-size-bottom-right
         case FrameBorderOrientation.top-right do
            cursor-size-top-right
         case FrameBorderOrientation.bottom-left do
            cursor-size-bottom-left
         case FrameBorderOrientation.top-left do
            cursor-size-top-left
         else
            {error "Not reachable code"} ||""
        }
  }
}

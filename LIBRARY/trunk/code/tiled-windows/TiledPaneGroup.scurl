||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An Open Curl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.


{doc-next
    {purpose
        A {docref PaneGroup} based on {docref PanedWindow} that arranges its child panes
        in a horizontal or vertical arrangement,
        with draggable sashes separating the panes.
    }
    {details
        To customize the appearance, you can use the following
        {docref-abbr Visual.style-element} values in your style rules.
        
        {Table
            columns = 3,
            border-width = 1in/300,
            border-color = "black",
            horizontal-line-width = 1in/300,
            vertical-line-width = 1in/300,
            cell-border-width = 0pt,
            cell-margin = 2pt,
            {header-cell style-element},
            {header-cell Type},
            {header-cell Description},
            
            {ctext LinearPaneGroup}, {docref LinearPaneGroup},
            {text The {ctext LinearPaneGroup} itself. You can use style rules
                to set local and nonlocal options.
            },
            
            {ctext LinearPaneGroup/paned-window}, {docref PanedWindow},
            {text The {docref PanedWindow} object that contains the child panes
                and manages their sizes.
            }
        }
    }
}
{define-class public open LinearPaneGroup {inherits PaneGroup}
  
  {doc-next
    {purpose
        The {docref PanedWindow} object that underlies this pane group
        and provides the draggable sashes.
    }
  }
  field protected constant pw:PanedWindow
  
  {doc-next
    {purpose
        The orientation of this {docref LinearPaneGroup},
        either horizontal or vertical.
    }
  }
  field protected constant orientation:Orientation
  
  {doc-next
    {purpose
        Return the opposite {docref Orientation} from a given orientation.
    }
    {parameter orientation,
        The orientation whose opposite is needed.
    }
    {return-vals
        The opposite of {param orientation}.
    }
  }
  {define-proc public {opposite-orientation orientation:Orientation}:Orientation
    {switch orientation
     case Orientation.horizontal do
        {return Orientation.vertical}
     case Orientation.vertical do
        {return Orientation.horizontal}
    }
  }
  
||--  {getter public open {group-type}:String
||--    {return self.orientation.name}
||--  }
  
  {getter public open {style-element}:String
    def _style-element = self._style-element
    {if _style-element == "" then
        {return "LinearPaneGroup"}
     else
        {return _style-element}
    }
  }
  
  {doc-next
    {purpose
        Return the base style rules that describe the default style of this object.
    }
    {return-vals
        An array of {docref StyleRule} objects that will be added to the base set of
        style rules for the current applet
        (using {docref StyleManager.append-base-style-rule})
        to produce the default style for {docref LinearPaneGroup} objects.
    }
  }
  {define-proc public {get-base-style-rules}:{Array-of StyleRule}
    {return
        {new {Array-of StyleRule},
            {StyleRule
                "LinearPaneGroup/paned-window",
                border-color = "silver"
            }
        }
    }
  }
  
  {doc-next
    {purpose
        Construct a {docref LinearPaneGroup} object.
    }
    {parameter root-container,
        The {docref PaneContainer} that will contain this {docref LinearPaneGroup}.
    }
    {parameter orientation,
        The orientation (horizontal or vertical) of this {docref LinearPaneGroup}.
    }
    {parameter percent,
        The {quote percentage} to be used when this object is added to another
        {docref LinearPaneGroup}.
        See {docref BasePane.percent} for further information.
    }
    {parameter ...,
        A list of {docref BasePane} objects that are initially in this group.
    }
  }
  {constructor public {default
                          root-container:PaneContainer,
                          orientation:Orientation = Orientation.vertical,
                          percent:double = -1.0,
                          ...:BasePane
                      }
    set self.orientation = orientation
    {construct-super root-container, ...}
    set self.percent = percent
    {if debugging? then
        set self.border-color = {if orientation == Orientation.horizontal then "cyan" else "blue"}    || *temp* RHH
        set self.border-width = 8pt       || *temp* RHH
        set self.border-style = "ridge"   || *temp* RHH
    }
    def sizes = {{Array-of double}}
    set self.pw =
        {PanedWindow
            _style-element = "LinearPaneGroup/paned-window",
            orientation = orientation
        }
    {for pane key i in self.base-panes do
        {self.pw.add-pane pane}
        {sizes.append
            {if pane.percent <= 0.0 then
                1.0 / self.base-panes.size
             else
                pane.percent
            }
        }
        {pane.mark-as-docked}
    }
    
    || Normalize the total of pane sizes to 1.  This avoids strange UI behaviors later on.
    let sum:double = 0.0
    {for size in sizes do
        set sum = sum + size
    }
    {for i = 0 below sizes.size do
        set sizes[i] = sizes[i] / sum
    }
    {self.pw.set-pane-sizes sizes}
    {self.add-internal self.pw}
  }
  
  {method public open {get-child-percent child:BasePane}:double
    {if self.size <= 1 then
        || If this child is an only child, then it is not really
        || meaningful to give a percentage, so just return -1,
        || which will cause the default percentage to be used in the future.
        {return -1.0}
    }    
    def child-index = {self.find child}
    def sizes = {self.get-pane-sizes}
    def child-stretchiness = sizes[child-index]
    let sum-stretchiness:double = 0.0
    {for size in sizes do
        set sum-stretchiness = sum-stretchiness + size
    }
    def child-percent = child-stretchiness / sum-stretchiness
    {return child-percent}
  }
  
  {method public open {remove-pane child:BasePane, for-replace?:bool}:void
    def child-index = {self.find child}
    def pw = self.pw
    
    || Compute the path to save in the child pane.
    {child.store-path}
    
    || Compute the percentage value to save in the child pane.
    set child.percent = {child.get-percent-before-undocking}
    
    def sizes = {self.get-pane-sizes}
    def child-stretchiness = sizes[child-index]
    let sum-stretchiness:double = 0.0
    {for size in sizes do
        set sum-stretchiness = sum-stretchiness + size
    }
    def child-percent = child-stretchiness / sum-stretchiness
    {sizes.remove child-index}
    {for i = 0 below sizes.size do
        set sizes[i] = sizes[i] / (sum-stretchiness - child-stretchiness)
    }

    || Then finally remove the child from us.
    {pw.remove-pane-at-index child-index}
    
    || Keep the total of the pane stretchiness values normalized to 1.  Not sure why
    || this makes PanedWindow happier, but it definitely does.
    {pw.set-pane-sizes sizes}
    {super.remove-pane child, for-replace?}
    
    {if not for-replace? then
        {switch self.size
         case 0 do
            || If this PaneGroup is now empty, then remove it from the hierarchy.
            {self.detach-this-pane}
         case 1 do
            || If there's just one pane left, then after things settle down,
            || see if our child or parent can be spliced out along with us.
            {after 0s do {self.try-splice-out}}
        }
    }
  }
  
  {doc-next
    {purpose
        Try to splice out this {docref LinearPaneGroup} along with its child or parent
        {docref LinearPaneGroup}, if that can be done without altering the layout.
    }
    {details
        As a result of successive docking and rearrangement operations, it is possible
        to build up long chains of {docref LinearPaneGroup} objects, each of which has
        just one child.
        This method looks to see if this {docref LinearPaneGroup} is a member of such a chain,
        and if so, attempts to splice it out, along with a neighboring (child or parent)
        {docref LinearPaneGroup}.
        By splicing the {docref LinearPaneGroup}s out in pairs like this,
        the rule that neighboring {docref LinearPaneGroup}s always have opposite orientations
        (horizontal vs. vertical)
        continues to be followed.
        
        Specifically, the conditions under which a splice will happen is if
        a {docref LinearPaneGroup} is found that has only one child object,
        and that {docref LinearPaneGroup} also has only one child object.
    }
  }
  {method public open {try-splice-out}:void
    {if self.display-context == null then
        || Something happened to detach us from the hierarchy, so skip the rest of this processing.
        {return}
    }
    {if self.size != 1 or not self.can-splice-out? then
        {return}
    }
    {assert self.pane-group == null or {self.pane-group.find self} >= 0}   || *temp* RHH
    {type-switch self[0]
     case child-group:LinearPaneGroup do
||--        {if child-group.can-splice-out? then
||--            {assert child-group.orientation != self.orientation}
||--            {if-non-null parent = self.pane-group then
||--                def grandchildren = {child-group.base-panes.clone}
||--                {for grandchild in grandchildren do
||--                    {grandchild.detach-this-pane for-replace? = true}
||--                }
||--                {if grandchildren.size == 1 then
||--                    {self.replace-pane-with grandchildren[0]}
||--                    {return}
||--||++             else
||--||++                def start-index = {parent.find self}
||--||++                {self.replace-pane-with grandchildren[0]}
||--||++                {for i = 1 below grandchildren.size do
||--||++                    {parent.add-pane-at-index grandchildren[i], start-index + i}
||--||++                }
||--||++                {return}
||--                }
||--             elseif child-group.size == 1 then
||--                def grandchild = child-group[0]
||--                {type-switch grandchild
||--                 case pg:PaneGroup do
||--                    {grandchild.detach-this-pane for-replace? = true}
||--                    {self.root-container.set-pane-group grandchild}
||--                }
||--                {return}
||--            }
||--        }
        {if child-group.size == 1 and child-group.can-splice-out? then
            {assert child-group.orientation != self.orientation}
            def grandchild = child-group[0]
            {if self.pane-group != null then
                {grandchild.detach-this-pane for-replace? = true}
                {self.replace-pane-with grandchild}
             else
                {type-switch grandchild
                 case pg:PaneGroup do
                    {grandchild.detach-this-pane for-replace? = true}
                    {self.root-container.set-pane-group grandchild}
                }
            }
            {return}
        }
    }
    {type-switch self.pane-group
     case parent-group:LinearPaneGroup do
        {parent-group.try-splice-out}
    }
  }

  {method public {add-pane-at-index pane:BasePane, index:int}:void
    {super.add-pane-at-index pane, index}
    {self.pw.add-pane-at-index pane, index}
  }
  
  {method public {replace-pane-at-index pane:BasePane, index:int}:BasePane
    def sizes = {self.get-pane-sizes}
    def old-pane = {super.replace-pane-at-index pane, index}
    {self.pw.set-pane-sizes sizes}
    {return old-pane}
  }
  
  || Make an array that includes the current "stretchiness" of each
  || pane in our PanedWindow.
  {method private {get-pane-sizes}:{Array-of double}
    let sizes:{Array-of double} = 
        {new {Array-of double}.from-size, self.size, 0.0}
    {for i = 0 below self.size do
        set sizes[i] = {{self.pw.get-pane i}.get-stretchiness}
    }
    {return sizes}
  }
  
  {method public open {heuristic-add-pane pane:BasePane, index:int}:void
    let percent:double = 
        {if pane.percent > 0.0 then
                pane.percent 
         else 
            1 / (self.size + 1)
        }
    let sizes:{Array-of double} = {self.get-pane-sizes}
    {if sizes.empty? then
        || We're inserting into a blank container, so this item should take 100% of the space.
        {sizes.insert 1.0, index}
     else
        let sum:double = 0.0
        {for size in sizes do
            set sum = sum + size
        }
        {for i = 0 below sizes.size do
            set sizes[i] = sizes[i] * (1 - percent) / sum
        }
        {sizes.insert percent, index}
    }
    
    let test-sum:double = 0.0                               || *temp* RHH
    {for size in sizes do set test-sum = test-sum + size}   || *temp* RHH
    {assert {abs test-sum - 1.0} < 1e-9}                    || *temp* RHH
  
    {self.add-pane-at-index pane, index}
    {self.pw.set-pane-sizes sizes}
  }
  
  {doc-next
    {purpose
        Determine whether a given {docref DockingAction} can be accommodated
        by this container.
    }
    {parameter action,
        The {docref DockingAction} to be investigated.
    }
    {return-vals
        The first return value is true if {param action} can be handled in this
        container without creating a new {docref PaneGroup}.
        The second return value is true if {param action} calls for an insertion
        later than the target object in the sequence of children of
        this {docref LinearPaneGroup},
        and otherwise is false.
    }
  }
  {method protected open {analyze-try-add-pane-action
                             action:DockingAction
                         }:(possible?:bool, after?:bool)
    let possible?:bool = false
    let after?:bool = false
    {switch self.orientation
     case Orientation.horizontal do
        {switch action
         case DockingAction.left do
            set possible? = true
         case DockingAction.right do
            set possible? = true
            set after? = true
        }
     case Orientation.vertical do
        {switch action
         case DockingAction.top do
            set possible? = true
         case DockingAction.bottom do
            set possible? = true
            set after? = true
        }
    }
    {return possible?, after?}
  }
  
  {method public open {try-add-pane-near-target
                          pane:BasePane,
                          target:BasePane,
                          action:DockingAction
                      }:bool
    def (possible?, after?) = {self.analyze-try-add-pane-action action}
    {if possible? then
        let index:int = {self.find target}
        {if after? then set index = index + 1}
        {self.add-pane-at-index pane, index}
        || TODO: Does the percentage of the newly added pane need to be adjusted?
    }
    {return possible?}
  }
  
  {method public open {try-add-pane-near-me
                          pane:BasePane,
                          action:DockingAction
                      }:bool
    def (possible?, after?) = {self.analyze-try-add-pane-action action}
    {if possible? then
        || In this case, the "before" position is before all children of this
        || PaneGroup, while the "after" position is after all of them.
        let index:int = {if after? then self.size else 0}
        {self.heuristic-add-pane pane, index}
    }
    {return possible?}
  }

  {method public {save-state out:TextOutputStream}:void
    {format out = out, "\n\{linear-pane-group orientation = %w", self.orientation.name}
    {self.write-state-info out}
    {for child in self.base-panes do
        {out.write-one-string ", "}
        {child.save-state out}
    }
    {out.write-one-string "\}"}
  }
}

{do
    {StyleManager.append-base-style-rule {splice {LinearPaneGroup.get-base-style-rules}}}
}

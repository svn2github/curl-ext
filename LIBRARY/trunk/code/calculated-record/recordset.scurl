||| Copyright 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.
|||
||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
||| ----------------------------------------------------------------------------

{curl-file-attributes character-encoding = "utf8"}


{doc-next 
    {purpose 
        A {docref LocalRecordSet} that can have its field attached to
        {docref CalculatedRecordField}s for automatic updates.
    }
    {details
        {ctext CalculatedRecordSet} adds to {docref LocalRecordSet}
        the ability to generate automatic
        updates to given record fields through, for example, the
        {docref-abbr CalculatedRecordSet.set-computed-field} method.
        Automatic updates are performed through
        {docref CalculatedRecordField} objects, which can declare
        other {docref CalculatedField}s as predecessors, thus allowing
        updates to propagate along a series of fields, updating each field
        as necessary from even a single change at the beginning of the series.
        
        Automatic update fields can be queried normally, but should only
        be set from within their {docref-abbr CalculatedField.update-proc}s;
        the actual value in the {docref CalculatedRecord} can still be
        {docref-abbr Record.revert}ed or {docref-abbr Record.commit}ted
        as normal.
        
        Automatic updates seldom happen immediately; due to the chains of
        predecessors and successors, many updates may be required due to a
        single value change, and all updates must be done in the proper order.
        For this reason, updates are triggered by enqueued {docref Event}s,
        specifically {docref CalculatedFieldEvent}s, so the event loop
        must be allowed to run before an update can occur.
    }
}
{define-class public open CalculatedRecordSet {inherits LocalRecordSet}
  
  {doc-next
    {purpose
        The {docref CalculatedFieldManager} this record set delegates
        automatic {docref CalculatedField} update to.
    }
  }
  field public constant manager:CalculatedFieldManager
  
  || Whether a computation cycle is running right now.
  field package in-computation?:bool = false
  
  || The last update epoch we heard about (working epoch).
  field package current-update-epoch:int = -1
  
  || The last update epoch we completed.
  field package last-update-epoch-completed:int = -1
  
  || Whether we're currently attached to the manager.
  field private _manager-attached?:bool = false
  
  {doc-next
    {purpose
        Instantiate this object.
    }
    {parameter manager,
        The {docref CalculatedFieldManager} this record set operates with.
    }
    {parameter fields,
        See {docref RecordSet.fields}.
    }
    {parameter modifiable?,
        See {docref RecordSet.modifiable?}.
    }
    {parameter ...,
        See {docref RecordSet.default}.
    }
  }
  {constructor public {default
                          manager:CalculatedFieldManager,
                          fields:RecordFields,
                          modifiable?:bool = true,
                          ...:Object
                      }
    set self.manager = manager
    {construct-super
        fields,
        modifiable? = modifiable?,
        ...
    }
  }
  
  || ======== LocalRecordSet overrides =========
  
  {method protected open {allocate-record}:CalculatedRecord
    {return {CalculatedRecord self}}
  }
  
  {method public open {new-record}:CalculatedRecord
    {self.ensure-modifiable}
    {return {self.allocate-record}}
  }
  
  || ======== event handling ========
  
  {setter public open {batch-events? b:bool}:void
    || Can't set batch-events? when we're in a computation cycle.
    {if self.in-computation? then
        {throw
            {CalculatedFieldException
                {hlmessage Cannot set batch-events? during field update.}
            }
        }
     else
        set super.batch-events? = b
        {if not b then
            {self.manager.batch-released-at-record-set self}
        }
    }
  }
  
  {method public open {handle-event event:Event}:void
    {type-switch event
        
     case e:CalculatedFieldUpdateStart do
        {if self.in-computation? then
            {throw
                {CalculatedFieldException
                    {hlmessage　"%s received while already updating.",　e}
                }
            }
         elseif self.batch-events? then
            {throw
                {CalculatedFieldException
                    {hlmessage　"Cannot update when batch-events? is true."}
                }
            }
         else
            || Have to handle-event first or batch will block it.
            {super.handle-event event}        
            
            || Since we just called to super.handle-event,
            || we temporarily lost control to dynamic event handlers.
            || Paranoia: check batch-events? again.
            {if self.batch-events? then
                {throw
                    {CalculatedFieldException
                        {hlmessage　"Cannot update when batch-events? is true."}
                    }
                }
            }
            
            set self.batch-events? = true
            set self.in-computation? = true
            set self.current-update-epoch = e.epoch
        }
        
     case e:CalculatedFieldUpdateAborted do
        {if e.epoch != self.current-update-epoch then
            {throw
                {CalculatedFieldUpdateEpochException
                    {hlmessage
                        "Invalid event epoch %d (expected %d).",
                        e.epoch,
                        self.last-update-epoch
                    }
                }
            }
        }
        set self.in-computation? = false
        set self.current-update-epoch = -1
        set self.batch-events? = false
        || Call super.handle-event after we release the batch lock.
        {super.handle-event event}        
        
     case e:CalculatedFieldUpdateFinished do
        {if e.epoch != self.current-update-epoch then
            {throw
                {CalculatedFieldUpdateEpochException
                    {hlmessage
                        "Invalid event epoch %d (expected %d).",
                        e.epoch,
                        self.last-update-epoch
                    }
                }
            }
        }
        set self.last-update-epoch-completed = e.epoch
        set self.current-update-epoch = -1
        set self.in-computation? = false
        set self.batch-events? = false
        || Call super.handle-event after we release the batch lock.
        {super.handle-event event}        
        
     else
        {super.handle-event event}        
    }
  }
  
  || ======== manager management ========
  
  {doc-next
    {purpose
        Whether this record set is currently attached to a manager.
    }
  }
  {getter package {manager-attached?}:bool
    {return self._manager-attached?}
  }
  {setter package {manager-attached? b:bool}:void
    set self._manager-attached? = b
  }
  
  {doc-next
    {purpose
        Attach to the {docref CalculatedFieldManager},
        if not currently attached.
    }
  }
  {method package {attach-to-manager}:void
    {if not self._manager-attached? then
        {self.manager.attach-record-set self}
        set self._manager-attached? = true
    }
  }
  
  {doc-next
    {purpose
        Note that this record set has been attached to its
        {docref CalculatedFieldManager}.
    }
  }
  {method package {note-manager-attached}:void
  }
  
  {doc-next
    {purpose
        Detach from the associated {docref CalculatedFieldManager},
        if possible.
    }
  }
  {method package {detach-from-manager}:void
    {if self._manager-attached? then
        {self.manager.detach-record-set self}
        set self._manager-attached? = false
    }
  }
  
  {doc-next
    {purpose
        Note that this record set has been detached from its
        {docref CalculatedFieldManager}.
    }
  }
  {method package {note-manager-detached}:void
  }
  
  || ======== computed field management ========
  
  {method package {create-new-computed-field
                      record:CalculatedRecord,
                      field-index:int,
                      update-proc:#CalculatedFieldUpdateProcType,
                      weak-predecessors?:bool
                  }:CalculatedRecordField
    || Ensure that we're attached.
    {self.attach-to-manager}
    
    || Create and return a new CF.
    def new-field =
        {CalculatedRecordField
            self,
            record,
            {self.fields.get-by-index field-index},
            update-proc = update-proc,
            weak-predecessors? = weak-predecessors?
        }
    {return new-field}
  }
  
  {doc-next
    {purpose
        Set a computed field, creating one if necessary, or altering an
        existing one.
    }
    {parameter record,
        The record on which to set automatic updates.
    }
    {parameter record-field,
        The {docref RecordField} in the {param record} on which to
        set automatic updates.
    }
    {parameter update-proc,
        See {docref CalculatedField.update-proc}.
    }
    {parameter weak-predecessors?,
        See {docref CalculatedField.weak-predecessors?}.
    }
    {parameter ...,
        Predecessors to the new or overwritten {docref CalculatedRecordField}.
    }
    {return-vals
        The {docref CalculatedRecordField} modified or generated.
    }
  }
  {method public open {set-computed-field
                          record:CalculatedRecord,
                          record-field:RecordField,
                          update-proc:#CalculatedFieldUpdateProcType = null,
                          weak-predecessors?:bool = false,
                          ...:CalculatedField
                      }:CalculatedRecordField
    {self.ensure-modifiable}
    {self.ensure-attached record}
    def field-index = {self.fields.get-index record-field.name} 
    def ret-field =
        {record.set-computed-field-by-index
            field-index,
            update-proc = update-proc,
            weak-predecessors? = weak-predecessors?,
            ...
        }
    {return ret-field}
  }
  
  {doc-next
    {purpose
        Get the {docref CalculatedRecordField} associated with the given
        record and field.
    }
    {parameter record,
        The record of interest.
    }
    {parameter record-field,
        The {docref RecordField} in the {param record} of interest.
    }
    {return-vals
        The {docref CalculatedRecordField} at the given intersection,
        or {ctext null} if none exists.
    }
  }
  {method public open {get-computed-field
                          record:CalculatedRecord,
                          record-field:RecordField
                      }:#CalculatedRecordField
    {self.ensure-attached record}
    def field-index = {self.fields.get-index record-field.name}
    {if field-index >= 0 then
        {return {record.get-computed-field-by-index field-index}}
     else
        {error {hlmessage "RecordField %s not found."}, record-field.name}
    }
  }
  
  {doc-next
    {purpose
        Get the {docref CalculatedRecordField} associated with the given
        record and field, or create one if none currently exists.
    }
    {parameter record,
        The record of interest.
    }
    {parameter record-field,
        The {docref RecordField} in the {param record} of interest.
    }
    {details
        If a new {docref CalculatedRecordField} is created, it will have
        default properties: no {docref-abbr CalculatedField.predecessors},
        a null {docref-abbr CalculatedField.update-proc}, etc.
    }
    {return-vals
        The {docref CalculatedRecordField} found or created, and
        a {docref bool} indicating whether it was created.
    }
  }
  {method public open {get-or-create-computed-field
                          record:CalculatedRecord,
                          record-field:RecordField
                      }:(computed-field:CalculatedRecordField, created?:bool)
    {self.ensure-attached record}
    def field-index = {self.fields.get-index record-field.name}
    {if field-index >= 0 then
        def (cf, created?) =
            {record.get-or-create-computed-field-by-index field-index}
        {return cf, created?}
     else
        {error {hlmessage "RecordField %s not found."}, record-field.name}
    }
  }
  
  {doc-next
    {purpose
        Request an update for all {docref CalculatedRecordField}s attached
        to this record set.
    }
    {notes
        It should not generally be necessary to call this method.
        See {docref ComputedField.request-update}.
    }
  }
  {method public open {request-calculated-fields-update}:void
    {for rec in self do
        {(rec asa CalculatedRecord).request-calculated-fields-update}
    }
  }
  
  {doc-next
    {purpose
        Disconnect all {docref CalculatedRecordField}s attached to records
        within this set.
    }
    {details
        This method will call {docref CalculatedField.disconnect} on all
        associated {docref CalculatedRecordField}s. The record set itself
        can still be used, and new {docref CalculatedRecordField}s created,
        but existing {docref CalculatedField}s will be rendered useless.
    }
  }
  {method public open {disconnect-all-fields}:void
    {for rec in self do
        {(rec asa CalculatedRecord).remove-all-computed-fields force? = true}
    }
    {self.detach-from-manager}
    
    || FIXME: unwatch all filter computed fields that point to this RS?
  }
  
}


{doc-next 
    {purpose 
        A {docref Record} that can have its values attached to
        {docref CalculatedRecordField}s for automatic updates.
    }
}
{define-class public open CalculatedRecord {inherits BasicRecord}
  
  || The nodes (with CalculatedFields) present in self.
  field private _computed-fields:#{FastArray-of #CalculatedRecordField}
  
  {doc-next 
    {purpose 
        Construct a new {ctext CalculatedRecord}.
    }
    {parameter record-set,
        The {docref CalculatedRecordSet} this record is to be used with.
    }
    {details
        Should not be called directly by applications.
        Call {docref RecordSet.new-record} instead.
        
        This constructor will allocate the initial 
        storage needed for the record, setting all 
        fields to their default values.
    }
  }
  {constructor public {default record-set:CalculatedRecordSet}
    {construct-super record-set}
  }
  
  || ======== COMPUTEDFIELD MANAGEMENT ========
  
  || Return the node array, creating it if necessary.
  {getter private {non-null-computed-fields}:{FastArray-of
                                                 #CalculatedRecordField}
    {if self._computed-fields == null then
        || FIXME: It would be nice to avoid checking the RecordSet on the
        || required array size but we can't access ._data.
        || This could be removed if this code were migrated into
        || the data-access package itself.
        {if-non-null rs = self.record-set then
            set self._computed-fields =
                {{FastArray-of #CalculatedRecordField}.from-size
                    rs.fields.size,
                    null
                }
         else
            {error
                {hlmessage
                    "Attempted to perform operation on detached Record."  
                }
            }
        }
    }
    {return {non-null self._computed-fields}}
  }
  
  {doc-next
    {purpose
        Returns the {docref CalculatedRecordField} attached at the given
        {docref RecordField} index, or {ctext null}.
    }
    {parameter field-index,
        The index of the {docref RecordField} of interest.
    }
  }
  {method public open {get-computed-field-by-index
                          field-index:int
                      }:#CalculatedRecordField
    {if-non-null computed-fields = self._computed-fields then
        {return computed-fields[field-index]}
    }
    {return null}
  }
  
  || Get the node for field X, or if non exists, create a new one there.
  {doc-next
    {purpose
        Returns the {docref CalculatedRecordField} attached at the given
        {docref RecordField} index, or creates and attaches a new one
        if none currently exists.
    }
    {parameter field-index,
        The index of the {docref RecordField} of interest.
    }
    {return-vals
        The {docref CalculatedRecordField} found or created, and
        a {docref bool} indicating whether it was created.
    }    
  }
  {method public open {get-or-create-computed-field-by-index
                          field-index:int
                      }:(computed-field:CalculatedRecordField, created?:bool)
    {if-non-null cf = {self.get-computed-field-by-index field-index} then
        {return cf, false}
    }
    {if-non-null rs = self.record-set asa #CalculatedRecordSet then
        def new-field =
            {rs.create-new-computed-field
                self,
                field-index,
                null,
                false
            }
        set self.non-null-computed-fields[field-index] = new-field
        {return new-field, true}
     else
        {error
            {hlmessage
                "Attempted to perform operation on detached Record."
            }
        }
    }
  }
  
  || Create or update a node in our tracking array.
  {doc-next
    {purpose
        Set a computed field, creating one if necessary, or altering an
        existing one.
    }
    {parameter field-index,
        The index of the {docref RecordField} of interest.
    }
    {parameter update-proc,
        See {docref CalculatedField.update-proc}.
    }
    {parameter weak-predecessors?,
        See {docref CalculatedField.weak-predecessors?}.
    }
    {parameter ...,
        Predecessors to the new or overwritten {docref CalculatedRecordField}.
    }
    {return-vals
        The {docref CalculatedRecordField} modified or generated.
    }
  }
  {method public open {set-computed-field-by-index
                          field-index:int,
                          update-proc:#CalculatedFieldUpdateProcType = null,
                          weak-predecessors?:bool = false,
                          ...:CalculatedField
                      }:CalculatedRecordField
    
    def rs = 
        {if-non-null rs = self.record-set asa #CalculatedRecordSet then
            rs
         else
            {error
                {hlmessage
                    "Attempted to perform operation on detached Record."  
                }
            }
        }
    
    let return-field:#CalculatedRecordField = null
    let update-preds?:bool = false
    
    {if-non-null cf = {self.get-computed-field-by-index field-index} then
        || If we have an existing node, update it with the new properties.
        {cf.clear-predecessors}
        {for pred-field in ... do
            {cf.add-predecessor pred-field}
        }
        
        || Replace the various parts of the existing data.
        set cf.update-proc = update-proc
        set cf.weak-predecessors? = weak-predecessors?
        set return-field = cf
        
     else
        || We didn't have an existing node, so create and set a new node.
        def computed-fields = self.non-null-computed-fields
        def new-field =
            {rs.create-new-computed-field
                self,
                field-index,
                update-proc,
                weak-predecessors?
            }
        {for pred-field in ... do
            {new-field.add-predecessor pred-field}
        }
        || FIXME: should this move before the predecessor settings?
        set computed-fields[field-index] = new-field
        set return-field = new-field
    }
    
    {if-non-null return-field then
        {return return-field}
    }
    
    {unreachable}
    
  }
  
  || Disconnect a node in self, which will have side effect of removing
  || the node from our tracking array.
  || Calls here are probably in response to a Record deletion,
  || so don't query our RecordSet here, as it may have already become null.
  ||
  || force? == skip has-successor/weak-predecessor? checks.
  {method package {remove-computed-field-by-index
                      field-index:int,
                      force?:bool = false
                  }:void
    {if-non-null computed-fields = self._computed-fields then
        {if-non-null cf = computed-fields[field-index] then
            {cf.disconnect force? = force?}
        }
    }
  }
  
  || Disconnect all nodes in self.
  {method package {remove-all-computed-fields force?:bool = false}:void
    {if-non-null computed-fields = self._computed-fields then
        {for field-index = 0 below computed-fields.size do
            {if-non-null cf = computed-fields[field-index] then
                {cf.disconnect force? = force?}
            }
        }
    }
  }
  
  || Called from an attached CalculatedField itself to signal a disconnect.
  || The CF is probably already dead, so don't call any of its methods,
  || even to query the RecordField, just look for it and remove it.
  {method package {note-field-disconnected cf:CalculatedRecordField}:void
    {if-non-null computed-fields = self._computed-fields then
        def index = {computed-fields.find cf}
        {if index >= 0 then
            set computed-fields[index] = null
        }
    }
  }
  
  {doc-next
    {purpose
        Request an update for all {docref CalculatedRecordField}s attached
        to this record.
    }
    {notes
        It should not generally be necessary to call this method.
        See {docref ComputedField.request-update}.
    }
  }
  {method public open {request-calculated-fields-update}:void
    {if-non-null computed-fields = self._computed-fields then
        {for field-index = 0 below computed-fields.size do
            {if-non-null cf = computed-fields[field-index] then
                {cf.request-update}
            }
        }
    }    
  }
  
  || ======== BasicRecord OVERRIDES ========
  
  {method public open {internal-revert}:void
    || Note that this method is only called when the Record is actually
    || reverted, so we don't need to check RecordState here.
    ||
    || TODO: we could potentially reduce the number of updates required in
    || the case of a Record with nodes that don't actually change value
    || because of this, but it may be rare enough that we don't need to.
    {super.internal-revert}
    {if-non-null computed-fields = self._computed-fields then
        {for cf in computed-fields do
            {if-non-null cf then
                {cf.note-value-changed}
            }
        }
    }
  }
  
  {method public open {internal-set-value 
                          field-index:int,
                          value:any,
                          for-init?:bool = false
                      }:void
    {super.internal-set-value field-index, value, for-init? = for-init?}
    || Notify any attached CalculatedField that its base value changed.
    {if-non-null cf = {self.get-computed-field-by-index field-index} then
        {cf.note-value-changed}
    }
  }
  
  {method public open {internal-set-state state:RecordState}:void
    {super.internal-set-state state}
    || When we detach, disconnect all attached CalculatedFields.
    {if state == RecordState.detached then
        {if-non-null computed-fields = self._computed-fields then
            {for cf in computed-fields do
                {if-non-null cf then
                    let force?:bool = true
                    {for succ in cf.node.successors do
                        def sdata = succ.data
                        {if not sdata.weak-predecessors? and
                            sdata.record != self
                         then
                            set force? = false
                            {break}
                        }
                    }
                    || TODO: if we KNOW we're about to blow up, then maybe
                    || we should error out here before doing any work, to
                    || avoid leaving the node partially disconnected.
                    || But it's cheaper/easier to just call out as below.
                    {cf.disconnect force? = force?}
                }
            }
        }
    }
  }
  
}


{doc-next
    {purpose
        A {docref CalculatedField} whose {ctext value} is attached to
        a {docref RecordField} in a {docref CalculatedRecord}.
    }
}
{define-class public open CalculatedRecordField {inherits CalculatedField}
  
  field private constant _record-set:CalculatedRecordSet
  field private constant _record:CalculatedRecord
  field private constant _field:RecordField
  
  {constructor package {default
                           record-set:CalculatedRecordSet,
                           record:CalculatedRecord,
                           record-field:RecordField,
                           update-proc:#CalculatedFieldUpdateProcType = null,
                           weak-predecessors?:bool = false
                       }
    set self._record-set = record-set
    set self._record = record
    set self._field = record-field
    
    {construct-super
        record-set.manager,
        update-proc = update-proc,
        weak-predecessors? = weak-predecessors?
    }
    
  }
  
  {getter public open {record-set}:RecordSet
    {return self._record-set}
  }
  
  {getter public open {record}:CalculatedRecord
    {return self._record}
  }
  
  {getter public open {field}:RecordField
    {return self._field}
  }
  
  {getter public open {value}:any
    {if not self.connected? then
        {throw {CalculatedFieldDisconnectedException}}
    }
    {return {self.record.get self.field.name}}
  }
  {setter public open {value val:any}:void
    {if not self.connected? then
        {throw {CalculatedFieldDisconnectedException}}
    }
    {self.record.set self.field.name, val}
  }
  
  {method public open {disconnect force?:bool = false}:void
    {if self.connected? then
        {super.disconnect force? = force?}
        {self.record.note-field-disconnected self}
    }
  }
  
  || ======== ACCESS OVERRIDES (expose predecessor methods) ========
  
  {method public open {add-predecessor
                          computed-field:CalculatedField,
                          error-if-present?:bool = true
                      }:void
    {super.add-predecessor
        computed-field,
        error-if-present? = error-if-present?    
    }
  }
  
  {method public open {remove-predecessor
                          computed-field:CalculatedField,
                          error-if-missing?:bool = false
                      }:void
    {super.remove-predecessor
        computed-field,
        error-if-missing? = error-if-missing?
    }
  }
  
  {method public open {clear-predecessors}:void
    {super.clear-predecessors}
  }
  
}


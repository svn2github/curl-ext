||| Copyright 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.
|||
||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
||| ----------------------------------------------------------------------------

{doc-next
    {purpose Post a modal dialog that allows the user to choose one
        of several actions, or cancel.
    }
    {parameter message, A message that explains the choices to the user.}
    {parameter title, The dialog title.}
    {parameter max-width, The maximum width of the dialog when displayed.}
    {return-vals
        The returned value is {ctext true} unless the dialog was
        cancelled, or if an event handler on a button sets the
        {ctext button.dialog.}{docref-abbr Dialog.return-state} to a
        non-null value.
    }
    {details
        Use {docref ok-button} for the buttons. Add an {docref Action}
        event handler to do what you need to do and the {ctext
        ok-button} will take care of closing the dialog.
    }
}
{define-proc public {choose-action-dialog
                 message:Graphic,
                 title:String = {hlmessage Choose an Action},
                 max-width:Distance = 6in,
                 large-icon:#Pixmap = null,
                 small-icon:#Pixmap = null,
                 ...:CommandButton
             }:bool

    || Find the first button and make sure there is one
    let args:Arguments = {Arguments {splice ...}}
    {if args.size == 0 then
        set args = {Arguments cancel-button}
    }
    let ok?:bool = true
    let cancel:CommandButton = 
        {cancel-button
            {on Action do
                set ok? = false
            }
        } 

    let first-button:CommandButton = cancel
    {for cb:any in args do
        set first-button = cb asa CommandButton
        {break}
    }

    let d:Dialog = 
        {Dialog
            margin = 9pt,
            {LimitedWidthFrame
                max-width = max-width,
                {VBox
                    spacing = 6pt,
                    message,
                    {HBox 
                        spacing = 6pt,
                        {Fill},
                        {splice args},
                        cancel
                    }
                }
            },
            {on DialogShow do
                {first-button.become-active}
            }
        }

    {d.show
        modal? = true,
        owner = null,
        title = title
    }

    {return ok? and d.return-state != null}
}

|| ----------------------------------------------------------------------------

{doc-next
    {purpose A standard Curl application that edits one file at a time.}
}
{define-class abstract public open FileApp {inherits CommandContext, Observer}

  {doc-next
    {purpose Name of the applet, for the window title.}
  }
  field public constant app-name:String
  
  {doc-next
    {purpose File dialog filters. Used when choosing a file to open or
        save. See {docref choose-file} for more information.
    }
  }
  field public-get protected-set filters:{Array-of FileDialogFilter}

  field private _untitled-url:Url = 
      {url "http://www.example.com/Untitled"} ||""

  {doc-next
    {purpose A url used to temporarily save an untitled file.}
  }
  {getter public open  {untitled-file-url}:Url 
    {return self._untitled-url}
  }

  {doc-next
    {purpose Return true if the current file has not been named by the user.}
  }
  {getter public open  {untitled?}:bool
    {return self.file-location == null
        or self.file-location == self.untitled-file-url
    }
  }


  {doc-next
    {purpose The location where the active file is stored.}
  }
  field protected file-location:#Url = null

  {doc-next
    {purpose A counter incremented each time the file is edited.}
  }
  field protected edit-count:int = 0

  {doc-next
    {purpose The change counter value when the file was last saved.}
  }
  field protected last-save-edit-count:int = 0

  {doc-next
    {purpose Timestamp of file when saved. Used to determine if file
        on disk was modified by some other application.
    }
  }
  field protected last-save-time:#DateTime = null

  {doc-next
    {purpose Initialize the application object.}
    {parameter app-name, The applet name to be shown in the title bar.}
    {parameter filters, Provides the initial value for
        {docref FileApp.filters}.
    }
  }
  {constructor public {default
                          app-name:String,
                          filters:FileDialogFilterArray =
                              FileDialogFilter.all-files-filter-array
                      }
    {construct-super.CommandContext}
    {construct-super.Observer}
    set self.filters = filters

    set self.app-name = app-name
    {platform-switch
     case "mac" do ||""
        {set-application-name app-name}
    }

    {register-suspend-proc 
        {proc {}:void
            {self.confirm-close}
        }
    }

    {register-resume-proc 
        {proc {}:void
            {self.notice-if-file-edited}
        }
    }

    {self.register-commands}
  }

  {doc-next
    {purpose Return the name of the file suitable for use in the title bar.}
  }
  {getter protected open {file-title}:String
    let name:String = {hlmessage Untitled}
    {if not self.untitled? then
        {if-non-null loc = self.file-location then
            {if-non-null s = loc.leaf then
                set name = s
            }
        }
    }
    {return name}
  }

  {doc-next
    {purpose Return the title to be shown in the window title bar.}
  }
  {getter public open {full-title}:String
    {return self.app-name & " - " & self.file-title} ||""
  }

  {doc-next
    {purpose Update the title bar. Call this if the file name changes.}
  }
  {method public open {refresh-title}:void
    {title heading? = false, {value self.full-title}}
  }

  {doc-next
    {purpose Update info about the current file after it is opened.}
    {details Call this after a file is opened or created (not when saved).}
  }
  {method protected open {update-file-info file-location:#Url, new?:bool}:void
    {if-non-null file-location then
        set self.file-location = file-location
    }
    {if new? then
        set self.edit-count = 0
    }
    set self.last-save-edit-count = self.edit-count
    set self.last-save-time = {DateTime.date "2000-01-01"} ||""

    let file-info:#File = null
    {if-non-null file-location then
        let tf:any = {file-location.resolve error-if-missing? = false}
        {type-switch tf
         case tf:File do
            set file-info = tf
         case ld:NormalDirectory do
            || Some apps use a directory Url
            set self.last-save-time = {DateTime}
         else
            {error {hlmessage Internal error: newly opened file not found}}
        }

        {if-non-null file-info then
            {if-non-null fmt:DateTime = file-info.when-last-modified then
                set self.last-save-time = fmt
            }
        }
    }
    {self.request-update-commands}
    {self.refresh-title}
  }

  {doc-next
    {purpose Call this method to indicate that there is no unsaved state.}
  }
  {method public open {note-file-saved}:void
    set self.last-save-edit-count = self.edit-count
  }

  {doc-next 
    {purpose Notice if the file was edited externally to this applet. 
        Offer the user the choice of updating from disk or not.
    }
  }
  {method protected open {notice-if-file-edited}:void
    let edited?:bool = false
    let disk-file-time:#DateTime
    {if-non-null fl = self.file-location then
        let tf:any = {fl.resolve error-if-missing? = false}
        {type-switch tf
         case tf:File do
            set disk-file-time = tf.when-last-modified
            {if-non-null disk-file-time then
                {if-non-null lmt:DateTime = self.last-save-time then
                    set edited? = disk-file-time > lmt
                }
            }
         case nd:NormalDirectory do
            || Assume not edited externally
            set edited? = false
        }
    }
    {if edited? and self.save-needed? then
        def name =
            {if self.untitled? then
                {hlmessage Untitled}
             else
                self.file-location.leaf
            }
        def msg =
            {hlformat
                "The current file '%1!s!' contains unsaved changes but the file on disk has also been modified. What would you like to do?", 
                name
            }
        {choose-action-dialog
            title = {hlmessage File Changed on Disk},
            msg,
            {ok-button
                label = {hlmessage &Save},
                tooltip = {hlmessage Overwrite disk file},
                width = standard-button-width,
                {on Action do
                    {self.file-save}
                }
            },
            {ok-button
                label = {hlmessage Save &As...},
                tooltip = {hlmessage Save to a new file},
                width = standard-button-width,
                {on Action do
                    {self.file-save-as}
                }
            },
            {ok-button
                label = {hlmessage &Load},
                tooltip = 
                    {hlmessage Discard unsaved changes and load the disk file},
                width = standard-button-width,
                {on Action do
                    {self.file-revert}
                }
            }
        }
        || Even if cancelled, don't bring this up again
        set self.last-save-time = disk-file-time
    }
  }

  {doc-next
    {purpose Register the commands implemented by this applet.}
  }
  {method protected open {register-commands}:void
    {self.add-command
        {SimpleCommand
            "exit", ||""
            execute-proc = {proc {}:void {self.exit}},
            enabled-proc = {proc {}:bool {return true}}
        }
    }

    {self.add-command
        {SimpleCommand
            "file-new", ||""
            execute-proc = {proc {}:void {self.file-new}},
            enabled-proc = {proc {}:bool {return true}}
        }
    }

    {self.add-command
        {SimpleCommand
            "file-open", ||""
            execute-proc = {proc {}:void {self.file-open}},
            enabled-proc = {proc {}:bool {return true}}
        }
    }

    {self.add-command
        {SimpleCommand
            "file-revert", ||""
            execute-proc = {proc {}:void {self.file-revert}},
            enabled-proc = 
                {proc {}:bool 
||--                    {return true}
                    || FIXME: this doesn't work reliably. It returns the
                    || correct result, but the menu doesn't show it!
                    {return self.save-needed?}
                }
        }
    }

    {self.add-command
        {SimpleCommand
            "file-save", ||""
            execute-proc = {proc {}:void {self.file-save}},
            enabled-proc = 
                {proc {}:bool 
||--                    {return true}
                    || FIXME: this doesn't work reliably. It returns the
                    || correct result, but the menu doesn't show it!
                    {return self.save-needed?}
                }
        }
    }

    {self.add-command
        {SimpleCommand
            "file-save-as", ||""
            execute-proc = {proc {}:void {self.file-save-as}},
            enabled-proc = {proc {}:bool {return true}}
        }
    }
  }

  {doc-next
    {purpose Return true if it is OK to close the current file.}
  }
  {method public open {confirm-close}:bool
    {if self.save-needed? then
        {return
            {choose-action-dialog
                title = {hlmessage Unsaved Changes},
                {hlmessage
                    Save changes to {value self.file-title}?
                },
                {ok-button
                    label = {hlmessage &Save},
                    width = standard-button-width,
                    {on Action do
                        {self.file-save}
                    }
                },
                {ok-button
                    label = {hlmessage &Discard},
                    width = standard-button-width,
                     {on Action do
                         || Pretend it was saved
                         {self.note-file-saved}
                     }
                }
            }
        }
    }
    {return true}
  }

  {doc-next
    {purpose Return true if there are unsaved changes in the file.}
  }
  {getter public open {save-needed?}:bool
    {return self.edit-count > self.last-save-edit-count}
  }

  {doc-next
    {purpose Call this every time a change is made that should be saved
        to the data file.
    }
  }
  {method public open {note-edited}:void
    {inc self.edit-count}
    {self.request-update-commands}
  }

  {doc-next
    {purpose Create a new file, but confirm with the user first if there
        are unsaved changes in the current file.
    }
    {override This method calls {docref FileApp.do-file-new}, which is
        normally overridden instead of this method.
    }
  }
  {method public open {file-new}:void
    {if {self.confirm-close} then
        {self.do-file-new}
    }
  }

  {doc-next
    {purpose Open a different file, but confirm with the user first if there
        are unsaved changes in the current file.
    }
    {override This method calls {docref FileApp.do-file-open} after
        asking the user to choose a file to open. It is usually 
        better to override {ctext do-file-open}.
    }
  }
  {method public open {file-open}:void
    {if {self.confirm-close} then
        let location:#Url = 
            {choose-file
                title = {hlmessage Choose File},
                filters = self.filters
            }

        {if-non-null file-url = location then
            {self.do-file-open file-url}
            {self.update-file-info location, true}
        }
        {self.request-update-commands}
    }
  }

  {doc-next
    {purpose Reopen the current file, discarding any unsaved changes.}
  }
  {method public open {file-revert}:void
    {if-non-null file-url = self.file-location then
        {self.do-file-open file-url}
        {self.update-file-info file-url, true}
    }
  }

  {doc-next
    {purpose Save the current file. If the file is untitled, prompt
        for a location to save to first.
    }
    {override This method calls {docref FileApp.file-save-as} or
        {docref FileApp.do-file-save} and is not normally overridden.
    }
  }
  {method public open {file-save}:void
    {if self.untitled? then
        {self.file-save-as}
     else
        {self.do-file-save}
        {self.note-file-saved}
    }
  }

  {doc-next
    {purpose Ask the user where to save the current file and then
        save it. This becomes the location used for future saves.
    }
    {override This method calls {docref FileApp.do-file-save-as} 
        passing along the location the user chose to save the file.
        It is not usually overridden.
    }
  }
  {method public open {file-save-as}:void

    let location:#Url =
        {choose-file
            style = FileDialogStyle.save-as,
            title = {hlmessage Save As...},
            filters = self.filters
        }
    {if-non-null file-url = location then
        {self.do-file-save-as file-url}
        {self.update-file-info file-url, false}
        {self.note-file-saved}
    }
  }

  {doc-next
    {purpose If there are unsaved changes, ask the user if the want to
        save them. Then terminate the applet.
    }
  }
  {method public open {exit}:bool
    {if {self.confirm-close} then
        {exit}
 ||       {unreachable}
 ||       {return true}
    }
    {return false}
  }

  || -----------------
  || Abstract methods
  || -----------------

  {doc-next
    {purpose Implement the new file command.}
    {details This is called after the user has been given a chance to save
        the current file.
    }
  }
  {method abstract public open {do-file-new}:void
  }

  {doc-next
    {purpose Open a file selected by the user.}
    {details This called after the user is given a chance to save the
        current file. The {param file-url} has been selected by the user.
    }
  }
  {method abstract public open {do-file-open file-url:Url}:void
  }

  {doc-next
    {purpose Save the current file.}
  }
  {method abstract public open {do-file-save}:void
  }

  {doc-next
    {purpose Save the current file into a new location.}
    {details This called after the user is given a chance to save the
        current file. The {param file-url} has been selected by the user.
    }
  }
  {method abstract public open {do-file-save-as file-url:Url}:void
  }

  {method public open {get-file-menu
                          items:#{Array-of Graphic} = {new {Array-of Graphic}}
                      }:SubMenu
    {return
        {SubMenu
            label = {hlmessage &File\ \ },
            {MenuAction 
                label = {hlmessage &New},
                bound-command = {self.get-command "file-new"} ||""
            },
            {MenuAction 
                label = {hlmessage &Open},
                key-accel-string = "accel-O", ||""
                bound-command = {self.get-command "file-open"} ||""
                },
            {MenuAction 
                label = {hlmessage &Revert},
                bound-command = {self.get-command "file-revert"} ||""
            },
            {MenuAction
                label = {hlmessage &Save},
                key-accel-string = "accel-S", ||""
                bound-command = {self.get-command "file-save"} ||""
            },
            {MenuAction
                label = {hlmessage Save &As},
                bound-command = {self.get-command "file-save-as"} ||""
            },
            {splice items},
            {menu-separator},
            {MenuAction 
                label = {hlmessage E&xit},
||--                    key-accel-string = "accel-q", ||""
                bound-command = {self.get-command "exit"} ||""
            }
        }
    }
  }
}

|| ----------------------------------------------------------------------------

{doc-next
    {purpose Maintain the location of a file or directory in
        persistent storage, along with recent choices.
    }
    {details
        To use this API, be sure to call {docref persistent-data} at
        the top level of your applet to identify a persistent data
        repository and make it available to the current applet.
        {curl-code
            {curl 7.0 applet}
            {persistent-data "my-applet-location", duration = 180days}
        }

        This class is a subclass of {docref GuiEventTarget}. Any time
        the location changes, an {docref Action} event is fired at
        it. You can handle this event to change the window title if
        desired. You can call {docref PersistedLocation.saved-url} to
        get the current location.
    }
}
{define-class public open PersistedLocation {inherits GuiEventTarget}

  field private action:Action = {Action}

  {doc-next
    {purpose A string to identify the saved state. Usually corresponds
        to the applet that created the file.
    }
  }
  field public-get protected-set url-key:String

  {doc-next
    {purpose Title for the file dialogs.
    }
  }
  field public-get protected-set title:#String

  {doc-next
    {purpose Indicates that the persisted url is for a directory.
    }
  }
  field public-get protected-set directory?:bool

  {doc-next
    {purpose File dialog filters. See {docref choose-file} for more
        information.
    }
  }
  field public-get protected-set filters:{Array-of FileDialogFilter}

  {doc-next
    {purpose Cached value of the persisted url.
    }
  }
  field protected _url:#Url

  field public-get protected-set recent-locations:Array = {Array}
  field public-get protected-set max-saved-locations:int = 10

  || Get the url associated with url-key. 
  || Prompt the user if the key is not found.
  {doc-next
    {purpose Store recently used locations (urls) between invocations
        of an applet.
    }
    {details
    }
    {parameter url-key, Provides the initial value for
        {docref PersistedLocation.url-key}.
    }
    {parameter title, Provides the initial value for
        {docref PersistedLocation.title}
    }
    {parameter directory?, Provides the initial value for
        {docref PersistedLocation.directory?}
    }
    {parameter filters, Provides the initial value for
        {docref PersistedLocation.filters}.
    }
  }
  {constructor public {default 
                          url-key:String,
                          title:#String = null,
                          directory?:bool = false,
                          filters:FileDialogFilterArray = 
                              FileDialogFilter.all-files-filter-array,
                          ...:EventHandler
                      }
    {construct-super ...}
    set self.url-key = url-key
    set self.title = title
    set self.directory? = directory?
    set self.filters = filters
    set self._url = null
    {after 0s do
        {self.handle-event self.action}
    }
  }

  {doc-next
    {purpose Get the most recently saved location, if any.}
  }
  {getter public open {saved-url}:#Url
    let last-url:String = ""
    {if self._url == null then
        {try
            let ds:String = {get-persistent-data self.url-key} asa String
            {dump ds}
            let data:JsonObject = {JsonValue-parse ds} asa JsonObject
            set last-url = data["location"] asa String
         catch ex:Exception do || JsonException or KeyNotFoundException or ?
            || Nothing stored, return null so applet can decide what to do
            {return null}
        }
        {try
            set self._url = {parse-url last-url}
         catch e:Exception do
            {return null}
        }
    }
    {return self._url}
  }

  {doc-next
    {purpose Return true if the persistent location is an existing
        file or directory.
    }
  }
  {getter public open {location-exists?}:bool
    let found?:bool = false
    {if-non-null location = self.saved-url then
        {try
            let a:any = {location.resolve}
            {dump location, a}
            {if self.directory? then
                ||FIXME: what to do?
             else
                let f:File = ({location.instantiate-File} asa File)
            }
            set found? = true
         catch e:IOException do
            || ignore
        }
    }
    {return found?}
  }

  {doc-next
    {purpose Get a location for a file or directory, prompting the 
        user to choose an existing file if the file last opened is not
        accessible.
    }
    {details
        Use this method if you expect to open an existing file.  It
        uses the File Open dialog if it is necessary to choose a new
        file. This happens when the persisted location refers to a
        file that no longer exists. If you need the user to choose a
        new file location, call {docref PersistedLocation.choose-new-file}.
    }
  }
  {method public open {get-url choose?:bool = false}:#Url
    {if choose? then
        {if self.directory? then
            {return {self.choose-directory}}
         else
            {return {self.choose-existing-file}}
        }
     else
        {if self.location-exists? then
            {return self._url}
        }
        || url seems to be bad, so ask for a new one (resursive call)
        {return {self.get-url choose? = true}}
    }
  }

  {doc-next
    {purpose Choose and remember a directory Url.}
  }
  {method protected open {choose-directory}:#Url
    {return {self.persist-url {choose-directory title = self.title}}}
  }

  {doc-next
    {purpose Choose and remember an existing file.}
  }
  {method protected open {choose-existing-file}:#Url
    let furl:#Url = 
        {choose-file
            title = self.title,
            style = FileDialogStyle.edit,
            filters = self.filters
        }
    {return {self.persist-url furl}}
  }


  {doc-next
    {purpose Choose and remember new file.}
  }
  {method public open {choose-new-file}:#Url
    let furl:#Url = 
        {choose-file
            title = self.title,
            style = FileDialogStyle.save-as,
            filters = self.filters
        }
    {return {self.persist-url furl}}
  }

  {doc-next
    {purpose Remember the specified url in persistent storage.
    }
  }
  {method public open {persist-url new-url:#Url}:#Url
    set self._url = new-url
    let last-url:String = ""
    {if-non-null new-url then
        set last-url = new-url.name
        {if {self.recent-locations.find last-url} == -1 then
            {self.recent-locations.insert last-url, 0}
            def rlsize = self.recent-locations.size
            {if rlsize > self.max-saved-locations then
                {self.recent-locations.remove rlsize - 1}
            }
        }
        def data:JsonObject = 
            {JsonObject
                "location", last-url,
                "recent-locations", self.recent-locations
            }

        || Update the value in the repository
        {set-persistent-data 
            self.url-key, {JsonValue-to-String data, prettify? = true}
        }
        {commit-persistent-data}
    }
    {self.handle-event self.action}
    {return new-url}
  }

}


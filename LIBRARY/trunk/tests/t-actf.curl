||| Copyright 1998-2010, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.
|||
||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
||| ----------------------------------------------------------------------------

{curl 7.0, 8.0 applet}
{applet manifest = "manifest.mcurl",
    {compiler-directives careful? = true}
}
{document-style PlainDocument}

{import * from CURL.GUI.STANDARD}
{import * from CURL.GRAPHICS.WINDOW}
{import * from CURL.GUI.CONTROL-BASE}

{import * from COM.CURL.EXT.GUI}
{import * from COM.CURL.EXT.AUTO-TEST}

{include "text-control.scurl"}

{title heading? = false, Autocomplet Text Field Test}

|| -------------------------------------------------------------------------

{define-class public open RandomCompletionProvider
  {inherits AutocompleteProvider}

  field public rng:LinearRandom
  field public digits:int

  {constructor public {default
                          max-results:int = 10,
                          digits:int = 6
                      }

    {construct-super max-results}
    set self.digits = digits
    set self.rng =
        {LinearRandom seed = ({DateTime}.info.fraction * 10000) asa int}
  }

  || Populate the dropdown by generating some random completions
  {method public open {refresh acf:AutocompleteMixin}:void
    def tf = acf.text-field
    def s = tf.value
    let items:StringArray = {StringArray}
    def result-count = {max 10, self.max-results}
    {if s.size < self.digits then
        def n = self.digits - s.size
        let a:int = 1
        let b:int = {pow 10.0, n} asa int
        let f:String = {format "%%s%%0%dd", n}
        {for i = 0 below result-count do
            {items.append {format f, s, {self.rng.next-in-range a, b - 1}}}
        }
    }
    {acf.populate-from-strings items}
  }
}

|| -------------------------------------------------------------------------

{def host = 
    {if {{get-base-url}.name.find-string "wwwin"} > -1 then
        "http://wwwin.curl.com/~mgordon"
        else
        "http://192.168.2.23/curltest"
    }
}

{def query = "/words-containing.php?value=%s&max=%s"}

{define-proc {make-control
                 value:String = "123456789 223456789 323456789 ",
                 ...
             }:Control
||--    {return
||--        {TextField
||--            value = "test",
||--            width = 2.5in,
||--            {splice ...}
||--        }
||--    }
    {return
        {AutocompleteTextField
            value = value,
||--            {AsyncCompletionProvider host & query},
            {RandomCompletionProvider},
            width = 2.5in,
            {splice ...}
        }
    }
}

|| -----------------
|| Define the tests
|| -----------------

{def value-changed = {ValueChanged}}
{def value-finished = {ValueFinished}}
{def action = {Action}}
{def key-press = {KeyPress}}

{def test =
    {GuiTest {make-control}, "Typing Test",
        {UI.set-value "A"},
        {UI.press-key "enter"},
        {UI.focus},
        {UI.type "111"},
        {UI.click 10mm, 25mm},
        {UI.click -10mm, -10mm},
        {UI.check-events
            key-press, value-changed,
            key-press, value-changed,
            key-press, value-changed,
            value-changed, value-finished
        },
        {UI.focus},
        {UI.set-value "222"},
        {UI.click -10mm, -10mm},
        {UI.type "456"},
        {UI.check-events 
            key-press, value-changed,
            key-press, value-changed,
            key-press, value-changed
        },
        {UI.check-value "222456"}
    }
}

{CommonTest.setup-common-mouse-test make-control}
{CommonTest.setup-common-keyboard-test make-control}
{CommonTest.setup-common-misc-test make-control}

{define-proc public {run-tests}:void
    {test.run}
    {CommonTest.run-common-test}
}

{GuiTest.setup "Autocomplete TextField Tests", run-all-proc = run-tests}


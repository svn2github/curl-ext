||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{value
    def name = "COM.CURL.EXT"
    def version = "0.5" || January 2011
    def dirname = name & "-V" & version
    
    {DeploySpecs
        caption = {lmessage deploy COM.CURL.EXT},

        || --------------------
        || SOURCE distribution
        || --------------------

        || code (copy)
        {DeploySpec
            "code/project.cprj",
            "deploy-source",
            "src/code"
        },

        || tests (copy)
        {DeploySpec
            "tests/project.cprj",
            "deploy",
            "src/tests"
        },

||--        || Samples
||--        {DeployCopy
||--            "samples",
||--            "src/samples"
||--        },

||--        || Tools
||--        {DeployCopy
||--            "tools",
||--            "src/tools"
||--        },

        || Test framework
        {DeploySpec
            "lib/CDU/project.cprj",
            "deploy",
            "src/lib/CDU"
        },

        || -- build scripts (copy)
        {DeployAction
            caption = {lmessage copy 'build' scripts},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                def target = {target-root.concat "src/tools"}
                {create-Directory target, error-if-exists? = false}
                def files =
                    {StringArray
                        "deploy.curl",
                        "deploy-batch.curl",
                        "deploy-specs.scurl"
                    }
                {for file in files do
                    {copy 
                        {source-root.concat "tools/" & file},
                        {target.concat file},
                        error-if-exists? = false
                    }
                }
            }
        },

        || -- project files
        {DeployAction
            caption = {lmessage copy project files},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                def target = {target-root.concat "src/code"}
                {create-Directory target, error-if-exists? = false}
                def files =
                    {StringArray
                        "project.cprj",
                        "classic-project.cprj",
                        ".project",
                        ".settings",
                        "BackgroundTask/project.cprj",
                        "BackgroundTask/manifest.mcurl",
                        "BackgroundTask/sample",
                        "BackgroundTask/tests"
                    }
                {for file in files do
                    {copy 
                        {source-root.concat "code/" & file},
                        {target.concat file},
                        recurse? = true,
                        error-if-exists? = false
                    }
                }
            }
        },

        || ---------------------
        || LIBRARY distribution
        || ---------------------
        
        || build library (pcurl)
        {DeploySpec
            "code/project.cprj",
            "deploy",
            "deploy/" & dirname
        },

        || ------------------
        || DOCS distribution
        || ------------------
        
        || documentation (copy + docs)
        || --------------------
        {DeploySpec
            "code/project.cprj",
            "deploy-docs",
            "docs-install/" & dirname
        },
        || dguide index
        || -------------------- 
        {DeployAction
            caption = {lmessage Generate DGuide Index},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                def contents-loc =
                    {target-root.concat
                        "docs-install/" & dirname 
                        & "/docs/en/dguide/_contents.scurl"}
                {generate-dguide-index contents-loc.parent}
            }},

||--        || SAMPLES distribution
||--        || ====================
||--        || project itself
||--        {DeploySpec
||--            "code/docs/en/dguide/samples/blazeds/curl-samples/project.cprj",
||--            "deploy",
||--            "blazeds-curl-samples"
||--        },
||--        || incorporate pcurled library
||--        {DeployAction
||--            caption = {lmessage copy LIB},
||--            {proc {self:DeployAction,
||--                   source-root:Url,
||--                   target-root:Url}:void
||--                def target = {target-root.concat "blazeds-curl-samples/lib"}
||--                {create-Directory target,
||--                    error-if-exists? = false}
||--                {copy 
||--                    {target-root.concat "deploy/" & dirname},
||--                    {target.concat dirname},
||--                    error-if-exists? = true,
||--                    recurse? = true}
||--            }},

        || final steps
        || ====================
        
        || clean source control directories
        || --------------------
        {DeployAction
            caption = {lmessage clean .svn},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                {clean-svn-directories target-root}
            }},
        
||--        || zip samples
||--        || --------------------
||--        {DeployAction
||--            caption = {lmessage zip samples},
||--            {proc {self:DeployAction,
||--                   source-root:Url,
||--                   target-root:Url}:void
||--                def dir = {target-root.concat "blazeds-curl-samples"}
||--                def loc = {create-zip-archive dir}
||--            }},
||--        {DeployAction
||--            caption = {lmessage zip samples dguide copy},
||--            {proc {self:DeployAction,
||--                   source-root:Url,
||--                   target-root:Url}:void
||--                def zipname = "blazeds-curl-samples.zip"
||--                {copy 
||--                    {target-root.concat zipname},
||--                    {target-root.concat "docs-install/"& dirname & "/docs/en/dguide/samples/" & zipname},
||--                    error-if-exists? = false}
||--            }},
        
        || ----------------------------
        || BOILERPLATE material {copy)
        || ----------------------------

        {DeployAction
            caption = {lmessage copy BOILERPLATE},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                {copy 
                    {source-root.concat "LICENSE"},
                    {target-root.concat "LICENSE"},
                    error-if-exists? = false}
                {copy 
                    {source-root.concat "NOTICE"},
                    {target-root.concat "NOTICE"},
                    error-if-exists? = false} 
                {copy 
                    {source-root.concat "README.txt"},
                    {target-root.concat "README.txt"},
                    error-if-exists? = false} 
            }}
    }
}
